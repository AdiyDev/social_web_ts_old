{"version":3,"sources":["pages/Chat/ChatPage.tsx"],"names":["ChatPage","Chat","dispatch","useDispatch","status","useSelector","state","chat","useEffect","startMessagesListening","stopMessagesListening","Messages","AddMessageForm","messages","messagesAnchorRef","useRef","useState","isAutoScroll","setIsAutoScroll","current","scrollIntoView","behavior","style","height","overflowY","onScroll","e","element","currentTarget","Math","abs","scrollHeight","scrollTop","clientHeight","map","m","Message","message","id","ref","React","memo","width","src","photo","alt","userName","userId","setMessage","value","onChange","target","disabled","onClick","sendMessagesListening"],"mappings":"yNAUaA,EAAqB,WAChC,OACE,8BACE,cAACC,EAAD,OAKAA,EAAiB,WACrB,IAAMC,EAAWC,cACXC,EAASC,aAAY,SAACC,GAAD,uBAAyBA,EAAMC,YAA/B,aAAyB,EAAYH,UAShE,OAPAI,qBAAU,WAER,OADAN,EAASO,eACF,WACLP,EAASQ,kBAEV,IAGD,gCACc,UAAXN,GACC,8EAEF,cAACO,EAAD,IACA,cAACC,EAAD,QAKAD,EAAqB,WACzB,IAAME,EAAWR,aAAY,SAACC,GAAD,OAAyBA,EAAMC,KAAKM,YAC3DC,EAAoBC,iBAAuB,MACjD,EAAwCC,oBAAS,GAAjD,mBAAOC,EAAP,KAAqBC,EAArB,KAqBA,OANAV,qBAAU,WACW,IAAD,EAAdS,IACF,UAAAH,EAAkBK,eAAlB,SAA2BC,eAAe,CAAEC,SAAU,cAEvD,CAACR,IAGF,sBACES,MAAO,CAAEC,OAAQ,QAASC,UAAW,QACrCC,SAtBkB,SAACC,GACrB,IAAIC,EAAUD,EAAEE,cAEdC,KAAKC,IACHH,EAAQI,aAAeJ,EAAQK,UAAYL,EAAQM,cACjD,KAEHhB,GAAgBC,GAAgB,GAEjCD,GAAgBC,GAAgB,IAWlC,UAIGL,EAASqB,KAAI,SAAAC,GAAC,OACb,cAACC,EAAD,CAAoBC,QAASF,GAAfA,EAAEG,OAElB,qBAAKC,IAAKzB,QAIVsB,EAAqDI,IAAMC,MAC/D,YAAkB,IAAfJ,EAAc,EAAdA,QACD,OACE,gCACE,qBACEf,MAAO,CAAEoB,MAAO,OAAQnB,OAAQ,IAChCoB,IAAG,OAAEN,QAAF,IAAEA,OAAF,EAAEA,EAASO,MACdC,IAAI,KAEN,uBACA,mCAAIR,QAAJ,IAAIA,OAAJ,EAAIA,EAASS,WACb,qCAAMT,QAAN,IAAMA,OAAN,EAAMA,EAASU,SACf,uBATF,OAUGV,QAVH,IAUGA,OAVH,EAUGA,EAASA,QACV,6BAMFzB,EAA2B,WAC/B,MAA8BI,mBAAS,IAAvC,mBAAOqB,EAAP,KAAgBW,EAAhB,KACM5C,EAASC,aAAY,SAACC,GAAD,uBAAyBA,EAAMC,YAA/B,aAAyB,EAAYH,UAC1DF,EAAWC,cAUjB,OACE,gCACE,8BACE,0BACE8C,MAAOZ,EACPa,SAAU,SAAAxB,GAAC,OAAIsB,EAAWtB,EAAEyB,OAAOF,YAGvC,8BACE,wBAAQG,SAAqB,UAAXhD,EAAoBiD,QAjBjB,WACpBhB,IAGLnC,EAASoD,YAAsBjB,IAC/BW,EAAW,MAYP","file":"static/js/6.f23b0190.chunk.js","sourcesContent":["import React, { useEffect, useState, useRef } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { ChatMessageAPIType } from '../../api/chat-api'\r\nimport {\r\n  sendMessagesListening,\r\n  startMessagesListening,\r\n  stopMessagesListening\r\n} from '../../redux/chat-reducer'\r\nimport { AppStateType } from '../../redux/redux-store'\r\n\r\nexport const ChatPage: React.FC = () => {\r\n  return (\r\n    <div>\r\n      <Chat />\r\n    </div>\r\n  )\r\n}\r\n\r\nconst Chat: React.FC = () => {\r\n  const dispatch = useDispatch()\r\n  const status = useSelector((state: AppStateType) => state.chat?.status)\r\n\r\n  useEffect(() => {\r\n    dispatch(startMessagesListening())\r\n    return () => {\r\n      dispatch(stopMessagesListening())\r\n    }\r\n  }, []) // eslint-disable-line\r\n\r\n  return (\r\n    <div>\r\n      {status === 'error' && (\r\n        <div>Some error occured. Please refresh the page</div>\r\n      )}\r\n      <Messages />\r\n      <AddMessageForm />\r\n    </div>\r\n  )\r\n}\r\n\r\nconst Messages: React.FC = () => {\r\n  const messages = useSelector((state: AppStateType) => state.chat.messages)\r\n  const messagesAnchorRef = useRef<HTMLDivElement>(null)\r\n  const [isAutoScroll, setIsAutoScroll] = useState(true)\r\n\r\n  const scrollHandler = (e: React.UIEvent<HTMLDivElement, UIEvent>) => {\r\n    let element = e.currentTarget\r\n    if (\r\n      Math.abs(\r\n        element.scrollHeight - element.scrollTop - element.clientHeight\r\n      ) < 300\r\n    ) {\r\n      !isAutoScroll && setIsAutoScroll(true)\r\n    } else {\r\n      isAutoScroll && setIsAutoScroll(false)\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (isAutoScroll) {\r\n      messagesAnchorRef.current?.scrollIntoView({ behavior: 'smooth' })\r\n    }\r\n  }, [messages]) // eslint-disable-line\r\n\r\n  return (\r\n    <div\r\n      style={{ height: '400px', overflowY: 'auto' }}\r\n      onScroll={scrollHandler}\r\n    >\r\n      {messages.map(m => (\r\n        <Message key={m.id} message={m} />\r\n      ))}\r\n      <div ref={messagesAnchorRef}></div>\r\n    </div>\r\n  )\r\n}\r\nconst Message: React.FC<{ message: ChatMessageAPIType }> = React.memo(\r\n  ({ message }) => {\r\n    return (\r\n      <div>\r\n        <img\r\n          style={{ width: '30px', height: 30 }}\r\n          src={message?.photo}\r\n          alt=\"\"\r\n        />\r\n        <br />\r\n        <b>{message?.userName}</b>\r\n        <sup>{message?.userId}</sup>\r\n        <br />\r\n        {message?.message}\r\n        <hr />\r\n      </div>\r\n    )\r\n  }\r\n)\r\n\r\nconst AddMessageForm: React.FC = () => {\r\n  const [message, setMessage] = useState('')\r\n  const status = useSelector((state: AppStateType) => state.chat?.status)\r\n  const dispatch = useDispatch()\r\n\r\n  const sendMessageHandler = () => {\r\n    if (!message) {\r\n      return\r\n    }\r\n    dispatch(sendMessagesListening(message))\r\n    setMessage('')\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <div>\r\n        <textarea\r\n          value={message}\r\n          onChange={e => setMessage(e.target.value)}\r\n        ></textarea>\r\n      </div>\r\n      <div>\r\n        <button disabled={status !== 'ready'} onClick={sendMessageHandler}>\r\n          Send\r\n        </button>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n"],"sourceRoot":""}