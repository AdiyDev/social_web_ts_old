{"version":3,"sources":["components/common/Paginator/Paginator.module.css","components/Navbar/Friends/Friends.module.css","components/Navbar/Friends/Friend/Friend.module.css","api/profile-api.ts","redux/profile-reducer.ts","api/api.ts","redux/dialogs-reducer.ts","api/chat-api.ts","redux/chat-reducer.ts","components/Users/Users.module.css","components/Header/Header.module.css","components/News/News.tsx","components/Music/Music.tsx","components/common/Paginator/Paginator.tsx","assets/images/user.png","components/Users/User.tsx","redux/users-selectors.ts","components/Users/UsersSearchForm.tsx","utils/object-helper.ts","api/users-api.ts","redux/users-reducer.ts","components/Users/Users.tsx","components/Users/UsersPage.tsx","components/Settings/Settings.tsx","api/auth-api.ts","api/security-api.ts","redux/auth-reducer.ts","components/Login/Login.tsx","components/Navbar/Friends/Friend/Friend.tsx","components/Navbar/Friends/Friends.tsx","components/Navbar/Friends/FriendsContainer.tsx","components/Header/Header.tsx","redux/app-reducer.ts","redux/navbar-reducer.ts","redux/redux-store.ts","App.tsx","index.tsx","components/common/FormsControls/FormsControls.tsx","components/common/FormsControls/FormsControls.module.css","utils/validators/validators.ts","assets/images/preloader.svg","components/common/Preloader/Preloader.tsx"],"names":["module","exports","profileAPI","userId","instance","get","then","res","data","status","put","photoFile","formData","FormData","append","headers","profile","initialState","posts","id","message","likesCount","newPostText","actions","addPostActionCreator","type","setUserProfile","setStatus","deletePost","postId","savePhotoSuccess","photos","getUserProfile","dispatch","a","getStatus","updateStatus","resultCode","ResultCodesEnum","Success","savePhoto","file","saveProfile","getState","auth","Error","stopSubmit","_error","messages","Promise","reject","profileReducer","state","action","newPost","filter","p","ResultCodesForCaptchaEnum","axios","create","baseURL","withCredentials","dialogs","name","sendMessage","newMessageBody","payload","dialogsReducer","subscribers","ws","closeHandler","notifiSubscribersAboutStatus","setTimeout","createChannel","messageHandler","e","newMessages","JSON","parse","forEach","s","openHandler","errorHandler","console","error","cleanUp","removeEventListener","addEventListener","close","WebSocket","chatAPI","eventName","callback","push","send","_newMessageHandler","newMessageHandlerCreator","_statusChangedHandler","statusChangedHandlerCreator","startMessagesListening","stopMessagesListening","sendMessagesListening","chatReducer","map","m","v1","index","array","length","News","props","Music","Paginator","totalItemsCount","pageSize","currentPage","onPageChanged","portionSize","pagesCount","Math","ceil","pages","i","portionCount","useState","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","className","cn","styles","paginator","onClick","selectedPage","pageNumber","User","user","followingInProgress","unfollow","follow","to","src","small","userPhoto","alt","usersPhoto","followed","disabled","some","location","country","city","getUsers","createSelector","usersPage","users","u","getPageSize","getTotalUsersCount","totalUsersCount","getCurrentPage","getIsFetching","isFetching","getFollowingInProgress","getUsersFilter","usersSearchFormValidate","values","UsersSearchForm","React","memo","useSelector","enableReinitialize","initialValues","term","friend","String","validate","onSubmit","setSubmitting","onFilterChanged","isSubmitting","as","value","updateObjectInArray","items","itemId","objPropName","newObjProps","usersAPI","post","delete","count","requestUsers","page","totalCount","_followUnfollowFlow","apiMethod","actionCreator","usersReducer","Users","useDispatch","history","useHistory","useEffect","parsed","queryString","search","substr","actualPage","actualFilter","Number","query","pathname","followChanged","bind","unfollowChanged","UsersPage","pageTitle","Preloader","Settings","authAPI","email","password","rememberMe","captcha","securityAPI","login","isAuth","captchaUrl","getAuthUserData","meData","getCaptchaUrl","url","authReducer","maxLength30","maxLengthCreator","LoginReduxForm","reduxForm","form","handleSubmit","createField","required","Input","undefined","style","formSummaryError","LoginPage","CaptchaIsRequired","Friend","path","item","activeClassName","active","Friends","friendsElements","navbar","f","sideBarFriends","ul","FriendsContainer","connect","friends","Header","Layout","span","width","height","loginBlock","backgroundColor","icon","UserOutlined","color","marginRight","marginLeft","initialized","appReducer","sidebarReducer","rootReducer","combineReducers","profilePage","dialogsPage","navbarReducer","formReducer","app","chat","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleware","SubMenu","Menu","Content","Footer","Sider","DialogsContainer","lazy","ProfileContainer","ChatPage","default","App","catchAllUnhandledErrors","alert","this","initializeApp","padding","margin","Item","mode","title","LaptopOutlined","SettingOutlined","SmileOutlined","minHeight","fallback","exact","render","subTitle","extra","textAlign","Component","AppContainer","withRouter","promise","all","SocialWebApp","ReactDOM","document","getElementById","FormControl","meta","touched","children","hasError","formControl","Textarea","input","restProps","placeholder","validators","component","text","maxLength","preloader"],"mappings":"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","file":"static/js/main.6a5dd801.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"paginator\":\"Paginator_paginator__20KnD\",\"pageNumber\":\"Paginator_pageNumber__9JUN6\",\"selectedPage\":\"Paginator_selectedPage__1KtyX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"sideBarFriends\":\"Friends_sideBarFriends__1RaVb\",\"ul\":\"Friends_ul__1QmKm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Friend_item__Rpkd8\",\"active\":\"Friend_active__3pHSh\"};","import { ProfileType, PhotosType } from '../types/types'\r\nimport { instance, APIResponseType } from './api'\r\n\r\ntype SavePhotoResponseDataType = {\r\n  photos: PhotosType\r\n}\r\n\r\nexport const profileAPI = {\r\n  getProfile(userId: number) {\r\n    return instance\r\n      .get<ProfileType & PhotosType>(`profile/` + userId)\r\n      .then(res => res.data)\r\n  },\r\n  getStatus(userId: number) {\r\n    return instance\r\n      .get<string>('profile/status/' + userId)\r\n      .then(res => res.data)\r\n  },\r\n  updateStatus(status: string) {\r\n    return instance\r\n      .put<APIResponseType>('profile/status', { status: status })\r\n      .then(res => res.data)\r\n  },\r\n  savePhoto(photoFile: any) {\r\n    const formData = new FormData()\r\n    formData.append('image', photoFile)\r\n\r\n    return instance\r\n      .put<APIResponseType<SavePhotoResponseDataType>>(\r\n        `profile/photo`,\r\n        formData,\r\n        {\r\n          headers: {\r\n            'Content-Type': 'multipart/form-data'\r\n          }\r\n        }\r\n      )\r\n      .then(res => res.data)\r\n  },\r\n  saveProfile(profile: ProfileType) {\r\n    return instance\r\n      .put<APIResponseType>(`profile`, profile)\r\n      .then(res => res.data)\r\n  }\r\n}\r\n","import { FormAction, stopSubmit } from 'redux-form'\r\nimport { ResultCodesEnum } from '../api/api'\r\nimport { PhotosType, PostType, ProfileType } from '../types/types'\r\nimport { profileAPI } from './../api/profile-api'\r\nimport { BaseThunkType, InferActionsTypes } from './redux-store'\r\n\r\nconst initialState = {\r\n  posts: [\r\n    { id: 1, message: 'test_message_profile ', likesCount: 15 },\r\n    { id: 2, message: 'test_message_profile ', likesCount: 10 },\r\n    { id: 3, message: 'test_message_profile ', likesCount: 7 },\r\n    { id: 4, message: 'test_message_profile ', likesCount: 1 }\r\n  ] as Array<PostType>,\r\n  profile: null as ProfileType | null,\r\n  status: '',\r\n  newPostText: ''\r\n}\r\n\r\nconst profileReducer = (\r\n  state = initialState,\r\n  action: ActionsType\r\n): InitialStateType => {\r\n  switch (action.type) {\r\n    case 'SN/PROFILE/ADD-POST': {\r\n      const newPost = {\r\n        id: 5,\r\n        message: action.newPostText,\r\n        likesCount: 0\r\n      }\r\n      return {\r\n        ...state,\r\n        posts: [...state.posts, newPost]\r\n      }\r\n    }\r\n    case 'SN/PROFILE/SET_STATUS': {\r\n      return {\r\n        ...state,\r\n        status: action.status\r\n      }\r\n    }\r\n    case 'SN/PROFILE/SET_USER_PROFILE': {\r\n      return { ...state, profile: action.profile }\r\n    }\r\n\r\n    case 'SN/PROFILE/DELETE_POST':\r\n      return {\r\n        ...state,\r\n        posts: state.posts.filter(p => p.id !== action.postId)\r\n      }\r\n\r\n    case 'SN/PROFILE/SAVE_PHOTO_SUCCESS':\r\n      return {\r\n        ...state,\r\n        profile: { ...state.profile, photos: action.photos } as ProfileType\r\n      }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport const actions = {\r\n  addPostActionCreator: (newPostText: string) =>\r\n    ({ type: 'SN/PROFILE/ADD-POST', newPostText } as const),\r\n  setUserProfile: (profile: ProfileType) =>\r\n    ({ type: 'SN/PROFILE/SET_USER_PROFILE', profile } as const),\r\n  setStatus: (status: string) =>\r\n    ({ type: 'SN/PROFILE/SET_STATUS', status } as const),\r\n  deletePost: (postId: number) =>\r\n    ({ type: 'SN/PROFILE/DELETE_POST', postId } as const),\r\n  savePhotoSuccess: (photos: PhotosType) =>\r\n    ({ type: 'SN/PROFILE/SAVE_PHOTO_SUCCESS', photos } as const)\r\n}\r\n\r\nexport const getUserProfile =\r\n  (userId: number): ThunkType =>\r\n  async dispatch => {\r\n    const data = await profileAPI.getProfile(userId)\r\n    dispatch(actions.setUserProfile(data))\r\n  }\r\n\r\nexport const getStatus =\r\n  (userId: number): ThunkType =>\r\n  async dispatch => {\r\n    const data = await profileAPI.getStatus(userId)\r\n    dispatch(actions.setStatus(data))\r\n  }\r\n\r\nexport const updateStatus =\r\n  (status: string): ThunkType =>\r\n  async dispatch => {\r\n    try {\r\n      const data = await profileAPI.updateStatus(status)\r\n\r\n      if (data.resultCode === ResultCodesEnum.Success) {\r\n        dispatch(actions.setStatus(status))\r\n      }\r\n    } catch (error) {}\r\n  }\r\n\r\nexport const savePhoto =\r\n  (file: File): ThunkType =>\r\n  async dispatch => {\r\n    const data = await profileAPI.savePhoto(file)\r\n\r\n    if (data.resultCode === ResultCodesEnum.Success) {\r\n      dispatch(actions.savePhotoSuccess(data.data.photos))\r\n    }\r\n  }\r\n\r\nexport const saveProfile =\r\n  (profile: ProfileType): ThunkType =>\r\n  async (dispatch, getState) => {\r\n    const userId = getState().auth.userId\r\n    const data = await profileAPI.saveProfile(profile)\r\n\r\n    if (data.resultCode === ResultCodesEnum.Success) {\r\n      if (userId !== null) {\r\n        dispatch(getUserProfile(userId))\r\n      } else {\r\n        throw new Error(\"userId can't be null\")\r\n      }\r\n    } else {\r\n      dispatch(stopSubmit('edit-profile', { _error: data.messages[0] }))\r\n      return Promise.reject(data.messages[0])\r\n    }\r\n  }\r\n\r\nexport default profileReducer\r\n\r\nexport type InitialStateType = typeof initialState\r\ntype ActionsType = InferActionsTypes<typeof actions>\r\ntype ThunkType = BaseThunkType<ActionsType | FormAction>\r\n","import axios from 'axios'\r\nimport { UsersType } from '../types/types'\r\nexport const instance = axios.create({\r\n  baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n  withCredentials: true,\r\n  headers: {\r\n    'API-KEY': '2561349e-c031-4f3f-acb6-8feb671f338e'\r\n  }\r\n})\r\n\r\nexport enum ResultCodesEnum {\r\n  Success = 0,\r\n  Error = 1\r\n}\r\n\r\nexport enum ResultCodesForCaptchaEnum {\r\n  CaptchaIsRequired = 10\r\n}\r\n\r\nexport type GetItemsType = {\r\n  items: Array<UsersType>\r\n  totalCount: number\r\n  error: string | null\r\n}\r\n\r\nexport type APIResponseType<D = {}, RC = ResultCodesEnum> = {\r\n  data: D\r\n  resultCode: RC\r\n  messages: Array<string>\r\n}\r\n","import { InferActionsTypes } from './redux-store'\r\n\r\ntype DialogType = {\r\n  id: number\r\n  name: string\r\n}\r\ntype MessageType = {\r\n  id: number\r\n  message: string\r\n}\r\n\r\nconst initialState = {\r\n  dialogs: [\r\n    { id: 1, name: 'user1' },\r\n    { id: 2, name: 'user2' },\r\n    { id: 3, name: 'user3' },\r\n    { id: 4, name: 'user4' },\r\n    { id: 5, name: 'user5' },\r\n    { id: 6, name: 'user6' }\r\n  ] as Array<DialogType>,\r\n  messages: [\r\n    { id: 1, message: 'test_message_dialogs' },\r\n    { id: 2, message: 'test_message_dialogs' },\r\n    { id: 3, message: 'test_message_dialogs' },\r\n    { id: 4, message: 'test_message_dialogs' },\r\n    { id: 5, message: 'test_message_dialogs' },\r\n    { id: 6, message: 'test_message_dialogs' }\r\n  ] as Array<MessageType>\r\n}\r\n\r\nconst dialogsReducer = (\r\n  state = initialState,\r\n  action: ActionsTypes\r\n): initialStateType => {\r\n  switch (action.type) {\r\n    case 'SN/DIALOGS/SEND-MESSAGE':\r\n      return {\r\n        ...state,\r\n        messages: [...state.messages, { id: 7, message: action?.payload }]\r\n      }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport const actions = {\r\n  sendMessage: (newMessageBody: string) => ({\r\n    type: 'SN/DIALOGS/SEND-MESSAGE',\r\n    payload: newMessageBody\r\n  })\r\n}\r\n\r\nexport default dialogsReducer\r\n\r\nexport type initialStateType = typeof initialState\r\ntype ActionsTypes = InferActionsTypes<typeof actions>\r\n","const subscribers = {\r\n  'messages-received': [] as MessagesReceivedSubscribersType[],\r\n  'status-changed': [] as StatusChangedSubscribersType[]\r\n}\r\n\r\nlet ws: WebSocket | null = null\r\ntype EventsNamesType = 'messages-received' | 'status-changed'\r\n\r\nconst closeHandler = () => {\r\n  notifiSubscribersAboutStatus('pending')\r\n  setTimeout(createChannel, 3000)\r\n}\r\n\r\nconst messageHandler = (e: MessageEvent) => {\r\n  const newMessages = JSON.parse(e?.data)\r\n  subscribers['messages-received'].forEach(s => s(newMessages))\r\n}\r\nconst openHandler = () => {\r\n  notifiSubscribersAboutStatus('ready')\r\n}\r\nconst errorHandler = () => {\r\n  notifiSubscribersAboutStatus('error')\r\n  console.error('RESTART PAGE')\r\n}\r\n\r\nconst cleanUp = () => {\r\n  ws?.removeEventListener('close', closeHandler)\r\n  ws?.removeEventListener('message', messageHandler)\r\n  ws?.addEventListener('open', openHandler)\r\n  ws?.addEventListener('error', errorHandler)\r\n}\r\n\r\nconst notifiSubscribersAboutStatus = (status: StatusType) => {\r\n  subscribers['status-changed'].forEach(s => s(status))\r\n}\r\n\r\nfunction createChannel() {\r\n  cleanUp()\r\n  ws?.close()\r\n  ws = new WebSocket(\r\n    'wss://social-network.samuraijs.com/handlers/ChatHandler.ashx'\r\n  )\r\n  notifiSubscribersAboutStatus('pending')\r\n  ws.addEventListener('close', closeHandler)\r\n  ws.addEventListener('message', messageHandler)\r\n  ws.addEventListener('open', openHandler)\r\n  ws.addEventListener('error', errorHandler)\r\n}\r\n\r\nexport const chatAPI = {\r\n  start() {\r\n    createChannel()\r\n  },\r\n  stop() {\r\n    subscribers['messages-received'] = []\r\n    subscribers['status-changed'] = []\r\n    cleanUp()\r\n    ws?.close()\r\n  },\r\n  subscribe(\r\n    eventName: EventsNamesType,\r\n    callback: MessagesReceivedSubscribersType | StatusChangedSubscribersType\r\n  ) {\r\n    // @ts-ignore\r\n    subscribers[eventName].push(callback)\r\n    return () => {\r\n      // @ts-ignore\r\n      subscribers[eventName] = subscribers[eventName].filter(\r\n        // @ts-ignore\r\n        s => s !== callback\r\n      )\r\n    }\r\n  },\r\n  unsubscribe(\r\n    eventName: EventsNamesType,\r\n    callback: MessagesReceivedSubscribersType | StatusChangedSubscribersType\r\n  ) {\r\n    // @ts-ignore\r\n    subscribers[eventName] = subscribers[eventName].filter(s => s !== callback)\r\n  },\r\n  sendMessage(message: string) {\r\n    ws?.send(message)\r\n  }\r\n}\r\n\r\ntype MessagesReceivedSubscribersType = (messages: ChatMessageAPIType[]) => void\r\ntype StatusChangedSubscribersType = (status: StatusType) => void\r\n\r\nexport type StatusType = 'pending' | 'ready' | 'error'\r\nexport type ChatMessageAPIType = {\r\n  message: string\r\n  photo: string\r\n  userId: number\r\n  userName: string\r\n}\r\n","import { BaseThunkType, InferActionsTypes } from './redux-store'\r\nimport { chatAPI, ChatMessageAPIType, StatusType } from '../api/chat-api'\r\nimport { Dispatch } from 'redux'\r\nimport { v1 } from 'uuid'\r\n\r\ntype ChatMessageType = ChatMessageAPIType & { id: string }\r\n\r\nconst initialState = {\r\n  messages: [] as ChatMessageType[],\r\n  status: 'pending' as StatusType\r\n}\r\n\r\nconst chatReducer = (\r\n  state = initialState,\r\n  action: actionTypes\r\n): initialStateType => {\r\n  switch (action.type) {\r\n    case 'SN/CHAT/MESSAGES_RECEIVIED':\r\n      return {\r\n        ...state,\r\n        messages: [\r\n          ...state.messages,\r\n          ...action?.payload.messages.map(m => ({ ...m, id: v1() }))\r\n        ].filter((m, index, array) => array.length - 100)\r\n      }\r\n    case 'SN/CHAT/STATUS_CHANGED':\r\n      return {\r\n        ...state,\r\n        status: action?.payload?.status\r\n      }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport const actions = {\r\n  messagesReceived: (messages: ChatMessageAPIType[]) =>\r\n    ({\r\n      type: 'SN/CHAT/MESSAGES_RECEIVIED',\r\n      payload: { messages }\r\n    } as const),\r\n  statusChanged: (status: StatusType) =>\r\n    ({\r\n      type: 'SN/CHAT/STATUS_CHANGED',\r\n      payload: { status }\r\n    } as const)\r\n}\r\n\r\nlet _newMessageHandler: ((messages: ChatMessageAPIType[]) => void) | null = null\r\n\r\nconst newMessageHandlerCreator = (dispatch: Dispatch) => {\r\n  if (_newMessageHandler === null) {\r\n    _newMessageHandler = messages => {\r\n      dispatch(actions.messagesReceived(messages))\r\n    }\r\n  }\r\n  return _newMessageHandler\r\n}\r\nlet _statusChangedHandler: ((status: StatusType) => void) | null = null\r\n\r\nconst statusChangedHandlerCreator = (dispatch: Dispatch) => {\r\n  if (_statusChangedHandler === null) {\r\n    _statusChangedHandler = status => {\r\n      dispatch(actions.statusChanged(status))\r\n    }\r\n  }\r\n  return _statusChangedHandler\r\n}\r\n\r\nexport const startMessagesListening = (): ThunkType => async dispatch => {\r\n  chatAPI.start()\r\n  chatAPI.subscribe('messages-received', newMessageHandlerCreator(dispatch))\r\n  chatAPI.subscribe('status-changed', statusChangedHandlerCreator(dispatch))\r\n}\r\n\r\nexport const stopMessagesListening = (): ThunkType => async dispatch => {\r\n  chatAPI.unsubscribe('messages-received', newMessageHandlerCreator(dispatch))\r\n  chatAPI.unsubscribe('status-changed', statusChangedHandlerCreator(dispatch))\r\n  chatAPI.stop()\r\n}\r\n\r\nexport const sendMessagesListening =\r\n  (message: string): ThunkType =>\r\n  async dispatch => {\r\n    chatAPI.sendMessage(message)\r\n  }\r\n\r\nexport default chatReducer\r\n\r\nexport type initialStateType = typeof initialState\r\ntype actionTypes = InferActionsTypes<typeof actions>\r\ntype ThunkType = BaseThunkType<actionTypes>\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"usersPhoto\":\"Users_usersPhoto__1i2xw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__1t8Eb\",\"loginBlock\":\"Header_loginBlock__1efFz\"};","import React from 'react'\r\n\r\nconst News: React.FC = (props: any) => {\r\n  return <div>News</div>\r\n}\r\n\r\nexport default News\r\n","import React from 'react'\r\n\r\nconst Music: React.FC = (props: any) => {\r\n  return <div>Music</div>\r\n}\r\n\r\nexport default Music\r\n","import React, { useState } from 'react'\r\nimport styles from './Paginator.module.css'\r\nimport cn from 'classnames'\r\n\r\ntype PropsType = {\r\n  totalItemsCount: number\r\n  pageSize: number\r\n  currentPage: number\r\n  onPageChanged: (pageNumber: number) => void\r\n  portionSize?: number\r\n}\r\n\r\nconst Paginator: React.FC<PropsType> = ({\r\n  totalItemsCount,\r\n  pageSize,\r\n  currentPage,\r\n  onPageChanged,\r\n  portionSize = 10\r\n}) => {\r\n  const pagesCount = Math.ceil(totalItemsCount / pageSize)\r\n\r\n  let pages = []\r\n  for (let i = 1; i <= pagesCount; i++) {\r\n    pages.push(i)\r\n  }\r\n\r\n  const portionCount = Math.ceil(pagesCount / portionSize)\r\n  const [portionNumber, setPortionNumber] = useState(1)\r\n  const leftPortionPageNumber = (portionNumber - 1) * portionSize + 1\r\n  const rightPortionPageNumber = portionNumber * portionSize\r\n\r\n  return (\r\n    <div className={cn(styles.paginator)}>\r\n      {portionNumber > 1 && (\r\n        <button\r\n          onClick={() => {\r\n            setPortionNumber(portionNumber - 1)\r\n          }}\r\n        >\r\n          PREV\r\n        </button>\r\n      )}\r\n\r\n      {pages\r\n        .filter(p => p >= leftPortionPageNumber && p <= rightPortionPageNumber)\r\n        .map(p => {\r\n          return (\r\n            <span\r\n              className={cn(\r\n                {\r\n                  [styles.selectedPage]: currentPage === p\r\n                },\r\n                styles.pageNumber\r\n              )}\r\n              key={p}\r\n              onClick={e => {\r\n                onPageChanged(p)\r\n              }}\r\n            >\r\n              {p}\r\n            </span>\r\n          )\r\n        })}\r\n      {portionCount > portionNumber && (\r\n        <button\r\n          onClick={() => {\r\n            setPortionNumber(portionNumber + 1)\r\n          }}\r\n        >\r\n          NEXT\r\n        </button>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Paginator\r\n","export default __webpack_public_path__ + \"static/media/user.94b78e6a.png\";","import React from 'react'\r\nimport styles from './Users.module.css'\r\nimport userPhoto from '../../assets/images/user.png'\r\nimport { NavLink } from 'react-router-dom'\r\nimport { UsersType } from '../../types/types'\r\n\r\ntype PropsType = {\r\n  user: UsersType\r\n  followingInProgress: Array<number>\r\n  unfollow: (userId: number) => void\r\n  follow: (userId: number) => void\r\n}\r\n\r\nconst User: React.FC<PropsType> = ({\r\n  user,\r\n  followingInProgress,\r\n  unfollow,\r\n  follow\r\n}) => {\r\n  return (\r\n    <div>\r\n      <span>\r\n        <div>\r\n          <NavLink to={'/profile/' + user.id}>\r\n            <img\r\n              src={user.photos.small !== null ? user.photos.small : userPhoto}\r\n              alt=\"\"\r\n              className={styles.usersPhoto}\r\n            />\r\n          </NavLink>\r\n        </div>\r\n        <div>\r\n          {user.followed ? (\r\n            <button\r\n              disabled={followingInProgress.some(id => id === user.id)}\r\n              onClick={() => {\r\n                follow(user.id)\r\n              }}\r\n            >\r\n              Unfollow\r\n            </button>\r\n          ) : (\r\n            <button\r\n              disabled={followingInProgress.some(id => id === user.id)}\r\n              onClick={() => {\r\n                unfollow(user.id)\r\n              }}\r\n            >\r\n              Follow\r\n            </button>\r\n          )}\r\n        </div>\r\n      </span>\r\n      <span>\r\n        <span>\r\n          <div>{user.name}</div>\r\n          <div>{user.status}</div>\r\n        </span>\r\n        <span>\r\n          <div>{user?.location?.country ?? 'Страна не определена'}</div>\r\n          <div>{user?.location?.city ?? 'Город не определён'}</div>\r\n        </span>\r\n      </span>\r\n    </div>\r\n  )\r\n}\r\nexport default User\r\n","import { createSelector } from 'reselect'\r\nimport { AppStateType } from './redux-store'\r\n\r\nconst getUsersSelector = (state: AppStateType) => {\r\n  return state.usersPage.users\r\n}\r\n\r\nexport const getUsers = createSelector(getUsersSelector, users => {\r\n  return users.filter(u => true)\r\n})\r\n\r\nexport const getPageSize = (state: AppStateType) => {\r\n  return state.usersPage.pageSize\r\n}\r\n\r\nexport const getTotalUsersCount = (state: AppStateType) => {\r\n  return state.usersPage.totalUsersCount\r\n}\r\n\r\nexport const getCurrentPage = (state: AppStateType) => {\r\n  return state.usersPage.currentPage\r\n}\r\n\r\nexport const getIsFetching = (state: AppStateType) => {\r\n  return state.usersPage.isFetching\r\n}\r\n\r\nexport const getFollowingInProgress = (state: AppStateType) => {\r\n  return state.usersPage.followingInProgress\r\n}\r\nexport const getUsersFilter = (state: AppStateType) => {\r\n  return state.usersPage.filter\r\n}\r\n","import { Field, Form, Formik } from 'formik'\r\nimport React from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport { FilterType } from '../../redux/users-reducer'\r\nimport { getUsersFilter } from '../../redux/users-selectors'\r\n\r\nconst usersSearchFormValidate = (values: any) => {\r\n  const errors = {}\r\n  return errors\r\n}\r\n\r\ntype FriendFormType = 'true' | 'false' | 'null'\r\n\r\ntype FormType = {\r\n  friend: 'true' | 'false' | 'null'\r\n  term: string\r\n}\r\n\r\ntype PropsType = {\r\n  onFilterChanged: (filter: FilterType) => void\r\n}\r\n\r\nexport const UsersSearchForm: React.FC<PropsType> = React.memo(props => {\r\n  const filter = useSelector(getUsersFilter)\r\n  const submit = (\r\n    values: FormType,\r\n    { setSubmitting }: { setSubmitting: (isSubmitting: boolean) => void }\r\n  ) => {\r\n    const filter: FilterType = {\r\n      term: values.term,\r\n      friend:\r\n        values.friend === 'null'\r\n          ? null\r\n          : values.friend === 'true'\r\n          ? true\r\n          : false\r\n    }\r\n\r\n    props.onFilterChanged(filter)\r\n    setSubmitting(false)\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Formik\r\n        enableReinitialize\r\n        initialValues={{\r\n          term: filter.term,\r\n          friend: String(filter.friend) as FriendFormType\r\n        }}\r\n        validate={usersSearchFormValidate}\r\n        onSubmit={submit}\r\n      >\r\n        {({ isSubmitting }) => (\r\n          <Form>\r\n            <Field type=\"text\" name=\"term\" />\r\n\r\n            <Field name=\"friend\" as=\"select\">\r\n              <option value=\"null\">All</option>\r\n              <option value=\"true\">Only followed</option>\r\n              <option value=\"false\">Only unfollowed</option>\r\n            </Field>\r\n            <button type=\"submit\" disabled={isSubmitting}>\r\n              Find\r\n            </button>\r\n          </Form>\r\n        )}\r\n      </Formik>\r\n    </div>\r\n  )\r\n})\r\n","export const updateObjectInArray = (\r\n  items: any,\r\n  itemId: any,\r\n  objPropName: any,\r\n  newObjProps: any\r\n) => {\r\n  return items.map((u: any) => {\r\n    if (u[objPropName] === itemId) {\r\n      return { ...u, ...newObjProps }\r\n    }\r\n    return u\r\n  })\r\n}\r\n","import { GetItemsType, instance, APIResponseType } from './api'\r\n\r\nexport const usersAPI = {\r\n  getUsers(\r\n    currentPage = 1,\r\n    pageSize = 10,\r\n    term: string = '',\r\n    friend: null | boolean = null\r\n  ) {\r\n    return instance\r\n      .get<GetItemsType>(\r\n        `users?page=${currentPage}&count=${pageSize}&term=${term}` +\r\n          (friend === null ? '' : `&friend=${friend}`)\r\n      )\r\n      .then(res => res.data)\r\n  },\r\n  follow(userId: number) {\r\n    return instance\r\n      .post<APIResponseType>(`follow/${userId}`)\r\n      .then(res => res.data)\r\n  },\r\n  unfollow(userId: number) {\r\n    return instance.delete(`follow/${userId}`).then(res => res.data)\r\n  }\r\n}\r\n","import { updateObjectInArray } from '../utils/object-helper'\r\nimport { UsersType } from '../types/types'\r\nimport { BaseThunkType, InferActionsTypes } from './redux-store'\r\nimport { Dispatch } from 'redux'\r\nimport { usersAPI } from '../api/users-api'\r\nimport { APIResponseType, ResultCodesEnum } from '../api/api'\r\n\r\nconst initialState = {\r\n  users: [] as Array<UsersType>,\r\n  pageSize: 10,\r\n  totalUsersCount: 0,\r\n  currentPage: 1,\r\n  isFetching: false,\r\n  followingInProgress: [] as Array<number>,\r\n  filter: {\r\n    term: '',\r\n    friend: null as null | boolean\r\n  }\r\n}\r\n\r\nconst usersReducer = (\r\n  state = initialState,\r\n  action: ActionsTypes\r\n): InitialState => {\r\n  switch (action.type) {\r\n    case 'SN/USERS/FOLLOW':\r\n      return {\r\n        ...state,\r\n        users: updateObjectInArray(state.users, action.userId, 'id', {\r\n          followed: true\r\n        })\r\n      }\r\n    case 'SN/USERS/UNFOLLOW':\r\n      return {\r\n        ...state,\r\n        users: updateObjectInArray(state.users, action.userId, 'id', {\r\n          followed: false\r\n        })\r\n      }\r\n    case 'SN/USERS/SET_USERS': {\r\n      return { ...state, users: action.users }\r\n    }\r\n    case 'SN/USERS/SET_CURRENT_PAGE': {\r\n      return { ...state, currentPage: action.currentPage }\r\n    }\r\n    case 'SN/USERS/SET_TOTAL_USERS_COUNT': {\r\n      return { ...state, totalUsersCount: action.count }\r\n    }\r\n    case 'SN/USERS/SET_FILTER': {\r\n      return { ...state, filter: action.payload }\r\n    }\r\n    case 'SN/USERS/TOGGLE_IS_FETCHING': {\r\n      return { ...state, isFetching: action.isFetching }\r\n    }\r\n    case 'SN/USERS/TOGGLE_IS_FOLLOWING_PROGRESS': {\r\n      return {\r\n        ...state,\r\n        followingInProgress: action.isFetching\r\n          ? [...state.followingInProgress, action.userId]\r\n          : state.followingInProgress.filter(id => id !== action.userId)\r\n      }\r\n    }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport const actions = {\r\n  followSuccess: (userId: number) =>\r\n    ({ type: 'SN/USERS/FOLLOW', userId } as const),\r\n  unfollowSuccess: (userId: number) =>\r\n    ({ type: 'SN/USERS/UNFOLLOW', userId } as const),\r\n  setUsers: (users: Array<UsersType>) =>\r\n    ({ type: 'SN/USERS/SET_USERS', users } as const),\r\n  setCurrentPage: (currentPage: number) =>\r\n    ({ type: 'SN/USERS/SET_CURRENT_PAGE', currentPage } as const),\r\n  setTotalUsersCount: (totalUsersCount: number) =>\r\n    ({\r\n      type: 'SN/USERS/SET_TOTAL_USERS_COUNT',\r\n      count: totalUsersCount\r\n    } as const),\r\n  setFilter: (filter: FilterType) =>\r\n    ({ type: 'SN/USERS/SET_FILTER', payload: filter } as const),\r\n  toggleIsFetching: (isFetching: boolean) =>\r\n    ({\r\n      type: 'SN/USERS/TOGGLE_IS_FETCHING',\r\n      isFetching\r\n    } as const),\r\n  toggleFollowingProgress: (isFetching: boolean, userId: number) =>\r\n    ({\r\n      type: 'SN/USERS/TOGGLE_IS_FOLLOWING_PROGRESS',\r\n      isFetching,\r\n      userId\r\n    } as const)\r\n}\r\n\r\nexport const requestUsers = (\r\n  page: number,\r\n  pageSize: number,\r\n  filter: FilterType\r\n): ThunkType => {\r\n  return async (dispatch, getState) => {\r\n    try {\r\n      dispatch(actions.toggleIsFetching(true))\r\n      dispatch(actions.setCurrentPage(page))\r\n      dispatch(actions.setFilter(filter))\r\n\r\n      const data = await usersAPI.getUsers(\r\n        page,\r\n        pageSize,\r\n        filter.term,\r\n        filter.friend\r\n      )\r\n      dispatch(actions.setUsers(data?.items))\r\n      dispatch(actions.setTotalUsersCount(data?.totalCount))\r\n    } catch (e) {\r\n    } finally {\r\n      dispatch(actions.toggleIsFetching(false))\r\n    }\r\n  }\r\n}\r\n\r\nconst _followUnfollowFlow = async (\r\n  dispatch: Dispatch<ActionsTypes>,\r\n  userId: number,\r\n  apiMethod: (userId: number) => Promise<APIResponseType>,\r\n  actionCreator: (userId: number) => ActionsTypes\r\n) => {\r\n  dispatch(actions.toggleFollowingProgress(true, userId))\r\n  const data = await apiMethod(userId)\r\n\r\n  if (data.resultCode === ResultCodesEnum.Success) {\r\n    dispatch(actionCreator(userId))\r\n  }\r\n  dispatch(actions.toggleFollowingProgress(false, userId))\r\n}\r\n\r\nexport const follow = (userId: number): ThunkType => {\r\n  return async dispatch => {\r\n    await _followUnfollowFlow(\r\n      dispatch,\r\n      userId,\r\n      usersAPI.follow.bind(usersAPI),\r\n      actions.followSuccess\r\n    )\r\n  }\r\n}\r\n\r\nexport const unfollow = (userId: number): ThunkType => {\r\n  return async dispatch => {\r\n    await _followUnfollowFlow(\r\n      dispatch,\r\n      userId,\r\n      usersAPI.unfollow.bind(usersAPI),\r\n      actions.unfollowSuccess\r\n    )\r\n  }\r\n}\r\n\r\nexport default usersReducer\r\n\r\nexport type InitialState = typeof initialState\r\nexport type FilterType = typeof initialState.filter\r\ntype ActionsTypes = InferActionsTypes<typeof actions>\r\ntype ThunkType = BaseThunkType<ActionsTypes>\r\n","import React, { useEffect } from 'react'\r\nimport Paginator from '../common/Paginator/Paginator'\r\nimport User from './User'\r\nimport { UsersSearchForm } from './UsersSearchForm'\r\nimport {\r\n  FilterType,\r\n  requestUsers,\r\n  follow,\r\n  unfollow\r\n} from '../../redux/users-reducer'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport {\r\n  getCurrentPage,\r\n  getFollowingInProgress,\r\n  getPageSize,\r\n  getTotalUsersCount,\r\n  getUsers,\r\n  getUsersFilter\r\n} from '../../redux/users-selectors'\r\nimport { useHistory } from 'react-router-dom'\r\nimport * as queryString from 'query-string'\r\n\r\ntype propsType = {}\r\ntype QueryParamsType = { term?: string; page?: string; friend?: string }\r\n\r\nexport const Users: React.FC<propsType> = () => {\r\n  const users = useSelector(getUsers)\r\n  const totalUsersCount = useSelector(getTotalUsersCount)\r\n  const currentPage = useSelector(getCurrentPage)\r\n  const pageSize = useSelector(getPageSize)\r\n  const filter = useSelector(getUsersFilter)\r\n  const followingInProgress = useSelector(getFollowingInProgress)\r\n\r\n  const dispatch = useDispatch()\r\n  const history = useHistory()\r\n\r\n  useEffect(() => {\r\n    const parsed = queryString.parse(\r\n      history.location.search.substr(1)\r\n    ) as QueryParamsType\r\n\r\n    let actualPage = currentPage\r\n    let actualFilter = filter\r\n\r\n    if (!!parsed.page) actualPage = Number(parsed.page)\r\n\r\n    if (!!parsed.term)\r\n      actualFilter = { ...actualFilter, term: parsed.term as string }\r\n\r\n    switch (parsed.friend) {\r\n      case 'null':\r\n        actualFilter = { ...actualFilter, friend: null }\r\n        break\r\n      case 'true':\r\n        actualFilter = { ...actualFilter, friend: true }\r\n        break\r\n      case 'false':\r\n        actualFilter = { ...actualFilter, friend: false }\r\n        break\r\n    }\r\n\r\n    dispatch(requestUsers(actualPage, pageSize, actualFilter))\r\n  }, []) // eslint-disable-line\r\n\r\n  useEffect(() => {\r\n    const query: QueryParamsType = {}\r\n\r\n    if (!!filter.term) query.term = filter.term\r\n    if (filter.friend !== null) query.friend = String(filter.friend)\r\n    if (currentPage !== 1) query.page = String(currentPage)\r\n\r\n    history.push({\r\n      pathname: '/users',\r\n      search: queryString.stringify(query)\r\n    })\r\n  }, [filter, currentPage, followingInProgress]) // eslint-disable-line\r\n\r\n  const onPageChanged = (pageNumber: number) => {\r\n    dispatch(requestUsers(pageNumber, pageSize, filter))\r\n  }\r\n  const onFilterChanged = (filter: FilterType) => {\r\n    dispatch(requestUsers(1, pageSize, filter))\r\n  }\r\n  const followChanged = (userId: number) => {\r\n    dispatch(follow(userId))\r\n  }\r\n  const unfollowChanged = (userId: number) => {\r\n    dispatch(unfollow(userId))\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <UsersSearchForm onFilterChanged={onFilterChanged} />\r\n      <Paginator\r\n        currentPage={currentPage}\r\n        onPageChanged={onPageChanged}\r\n        totalItemsCount={totalUsersCount}\r\n        pageSize={pageSize}\r\n      />\r\n\r\n      <div>\r\n        {users.map(u => (\r\n          <User\r\n            user={u}\r\n            followingInProgress={followingInProgress}\r\n            key={u.id}\r\n            unfollow={followChanged}\r\n            follow={unfollowChanged}\r\n          />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { Users } from './Users'\r\nimport Preloader from '../common/Preloader/Preloader'\r\nimport { getIsFetching } from '../../redux/users-selectors'\r\nimport { useSelector } from 'react-redux'\r\n\r\ntype UsersPagePropsType = {\r\n  pageTitle: string\r\n}\r\n\r\nexport const UsersPage: React.FC<UsersPagePropsType> = props => {\r\n  const isFetching = useSelector(getIsFetching)\r\n  return (\r\n    <>\r\n      <h2>{props.pageTitle}</h2>\r\n      {isFetching ? <Preloader /> : null}\r\n      <Users />\r\n    </>\r\n  )\r\n}\r\n","import React from 'react'\r\n\r\nconst Settings: React.FC = (props: any) => {\r\n  return <div>Settings</div>\r\n}\r\n\r\nexport default Settings\r\n","import {\r\n  instance,\r\n  APIResponseType,\r\n  ResultCodesEnum,\r\n  ResultCodesForCaptchaEnum\r\n} from './api'\r\n\r\ntype MeResponseDataType = {\r\n  id: number\r\n  email: number\r\n  login: string\r\n}\r\n\r\ntype LoginResponseDataType = {\r\n  userId: number\r\n}\r\n\r\nexport const authAPI = {\r\n  me() {\r\n    return instance\r\n      .get<APIResponseType<MeResponseDataType>>(`auth/me`)\r\n      .then(res => res.data)\r\n  },\r\n  login(\r\n    email: string,\r\n    password: string,\r\n    rememberMe = false,\r\n    captcha: null | string = null\r\n  ) {\r\n    return instance\r\n      .post<\r\n        APIResponseType<\r\n          LoginResponseDataType,\r\n          ResultCodesEnum | ResultCodesForCaptchaEnum\r\n        >\r\n      >(`auth/login`, { email, password, rememberMe, captcha })\r\n      .then(res => res.data)\r\n  },\r\n  logout() {\r\n    return instance.delete(`auth/login`)\r\n  }\r\n}\r\n","import { instance } from './api'\r\n\r\ntype GetCaptchaUrlResponseType = {\r\n  url: string\r\n}\r\n\r\nexport const securityAPI = {\r\n  getCaptchaUrl() {\r\n    return instance\r\n      .get<GetCaptchaUrlResponseType>(`security/get-captcha-url`)\r\n      .then(res => res.data)\r\n  }\r\n}\r\n","import { FormAction, stopSubmit } from 'redux-form'\r\nimport { authAPI } from './../api/auth-api'\r\nimport { securityAPI } from './../api/security-api'\r\nimport { ResultCodesEnum, ResultCodesForCaptchaEnum } from '../api/api'\r\nimport { BaseThunkType, InferActionsTypes } from './redux-store'\r\n\r\nconst initialState = {\r\n  userId: null as number | null,\r\n  email: null as string | null,\r\n  login: null as string | null,\r\n  isAuth: false,\r\n  captchaUrl: null as string | null\r\n}\r\n\r\nconst authReducer = (\r\n  state = initialState,\r\n  action: actionTypes\r\n): initialStateType => {\r\n  switch (action.type) {\r\n    case 'SN/AUTH/SET_USER_DATA':\r\n    case 'SN/AUTH/GET_CAPTCHA_URL_SUCCESS':\r\n      return {\r\n        ...state,\r\n        ...action?.payload\r\n      }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport const actions = {\r\n  setAuthUserData: (\r\n    userId: number | null,\r\n    email: string | null,\r\n    login: string | null,\r\n    isAuth: boolean\r\n  ) =>\r\n    ({\r\n      type: 'SN/AUTH/SET_USER_DATA',\r\n      payload: { userId, email, login, isAuth }\r\n    } as const),\r\n  getCaptchaUrlSuccess: (captchaUrl: string) =>\r\n    ({\r\n      type: 'SN/AUTH/GET_CAPTCHA_URL_SUCCESS',\r\n      payload: { captchaUrl }\r\n    } as const)\r\n}\r\n\r\nexport const getAuthUserData = (): ThunkType => async dispatch => {\r\n  const meData = await authAPI.me()\r\n  if (meData.resultCode === ResultCodesEnum.Success) {\r\n    const { id, email, login } = meData?.data as any\r\n    dispatch(actions.setAuthUserData(id, email, login, true))\r\n  }\r\n}\r\n\r\nexport const login =\r\n  (\r\n    email: string,\r\n    password: string,\r\n    rememberMe: boolean,\r\n    captcha: string\r\n  ): ThunkType =>\r\n  async dispatch => {\r\n    const data = await authAPI.login(email, password, rememberMe, captcha)\r\n    if (data.resultCode === ResultCodesEnum.Success) {\r\n      dispatch(getAuthUserData())\r\n    } else {\r\n      if (data.resultCode === ResultCodesForCaptchaEnum.CaptchaIsRequired) {\r\n        dispatch(getCaptchaUrl())\r\n      }\r\n\r\n      const message = data.messages.length > 0 ? data.messages[0] : 'Some error'\r\n      dispatch(stopSubmit('login', { _error: message }))\r\n    }\r\n  }\r\n\r\nexport const getCaptchaUrl = (): ThunkType => async dispatch => {\r\n  const data = await securityAPI.getCaptchaUrl()\r\n  const captchaUrl = data.url\r\n  dispatch(actions.getCaptchaUrlSuccess(captchaUrl))\r\n}\r\n\r\nexport const logout = (): ThunkType => async dispatch => {\r\n  const response = await authAPI.logout()\r\n\r\n  if (response.data.resultCode === ResultCodesEnum.Success) {\r\n    dispatch(actions.setAuthUserData(null, null, null, false))\r\n  }\r\n}\r\n\r\nexport default authReducer\r\n\r\nexport type initialStateType = typeof initialState\r\ntype actionTypes = InferActionsTypes<typeof actions>\r\ntype ThunkType = BaseThunkType<actionTypes | FormAction>\r\n","import React from 'react'\r\nimport { InjectedFormProps, reduxForm } from 'redux-form'\r\nimport {\r\n  createField,\r\n  GetStringKeys,\r\n  Input\r\n} from '../common/FormsControls/FormsControls'\r\nimport { maxLengthCreator, required } from '../../utils/validators/validators'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { login } from '../../redux/auth-reducer'\r\nimport { Redirect } from 'react-router-dom'\r\nimport style from './../common/FormsControls/FormsControls.module.css'\r\nimport { AppStateType } from '../../redux/redux-store'\r\n\r\nconst maxLength30 = maxLengthCreator(30)\r\n\r\ntype LoginFormOwnProps = {\r\n  captchaUrl: string | null\r\n}\r\n\r\nconst LoginForm: React.FC<\r\n  InjectedFormProps<LoginFormValuesType, LoginFormOwnProps> & LoginFormOwnProps\r\n> = ({ handleSubmit, error, captchaUrl }) => {\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      {createField<LoginFormValuesTypeKeys>(\r\n        'Email',\r\n        'email',\r\n        [required, maxLength30],\r\n        Input\r\n      )}\r\n      {createField<LoginFormValuesTypeKeys>(\r\n        'Password',\r\n        'password',\r\n        [required, maxLength30],\r\n        Input,\r\n        { type: 'password' }\r\n      )}\r\n      {createField<LoginFormValuesTypeKeys>(\r\n        undefined,\r\n        'rememberMe',\r\n        [],\r\n        Input,\r\n        { type: 'checkbox' },\r\n        'remember me'\r\n      )}\r\n\r\n      {captchaUrl && <img src={captchaUrl} alt=\"\" />}\r\n      {captchaUrl &&\r\n        createField<LoginFormValuesTypeKeys>(\r\n          'Symbols from image',\r\n          'captcha',\r\n          [required],\r\n          Input,\r\n          {}\r\n        )}\r\n\r\n      {error && <div className={style.formSummaryError}>{error}</div>}\r\n      <div>\r\n        <button>Login</button>\r\n      </div>\r\n    </form>\r\n  )\r\n}\r\n\r\nconst LoginReduxForm = reduxForm<LoginFormValuesType, LoginFormOwnProps>({\r\n  form: 'login'\r\n})(LoginForm)\r\n\r\nexport type LoginFormValuesType = {\r\n  captcha: string\r\n  rememberMe: boolean\r\n  password: string\r\n  email: string\r\n}\r\ntype LoginFormValuesTypeKeys = GetStringKeys<LoginFormValuesType>\r\n\r\nexport const LoginPage: React.FC = () => {\r\n  const captchaUrl = useSelector((state: AppStateType) => state.auth.captchaUrl)\r\n  const isAuth = useSelector((state: AppStateType) => state.auth.isAuth)\r\n  const dispatch = useDispatch()\r\n\r\n  const onSubmit = (formData: LoginFormValuesType) => {\r\n    dispatch(\r\n      login(\r\n        formData.email,\r\n        formData.password,\r\n        formData.rememberMe,\r\n        formData.captcha\r\n      )\r\n    )\r\n  }\r\n\r\n  if (isAuth) {\r\n    return <Redirect to={'/profile'} />\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h1>Login</h1>\r\n      <LoginReduxForm onSubmit={onSubmit} captchaUrl={captchaUrl} />\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport s from './Friend.module.css'\r\nimport { NavLink } from 'react-router-dom'\r\n\r\ntype PropsType = {\r\n  id: number\r\n  name: string\r\n}\r\n\r\nconst Friend: React.FC<PropsType> = props => {\r\n  const path = '/' + props.id\r\n\r\n  return (\r\n    <li className={s.item}>\r\n      <NavLink to={path} activeClassName={s.active}>\r\n        <img\r\n          src=\"http://www.petplan.com.au/blog/wp-content/uploads/2016/12/pet-insurance-dog-cat-8.jpg\"\r\n          alt={`${props.name} ${props.id}`}\r\n        ></img>\r\n        <p>{props.name}</p>\r\n      </NavLink>\r\n    </li>\r\n  )\r\n}\r\n\r\nexport default Friend\r\n","import React from 'react'\r\nimport s from './Friends.module.css'\r\nimport Friend from './Friend/Friend'\r\nimport { friendType } from '../../../redux/navbar-reducer'\r\n\r\ntype PropsType = {\r\n  navbar: Array<friendType>\r\n}\r\n\r\nconst Friends: React.FC<PropsType> = props => {\r\n  const friendsElements = props.navbar.map(f => (\r\n    <Friend id={f.id} key={f.id} name={f.name} />\r\n  ))\r\n\r\n  return (\r\n    <div className={s.sideBarFriends}>\r\n      <h3>Friends</h3>\r\n      <ul className={s.ul}>{friendsElements}</ul>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Friends\r\n","import Friends from './Friends'\r\nimport { connect } from 'react-redux'\r\nimport { AppStateType } from '../../../redux/redux-store'\r\nimport { friendType } from '../../../redux/navbar-reducer'\r\n\r\ntype MapStatePropType = {\r\n  navbar: Array<friendType>\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStatePropType => {\r\n  return {\r\n    navbar: state.navbar.friends\r\n  }\r\n}\r\n\r\nconst FriendsContainer = connect(mapStateToProps)(Friends)\r\n\r\nexport default FriendsContainer\r\n","import React from 'react'\r\nimport s from './Header.module.css'\r\nimport { Link } from 'react-router-dom'\r\nimport { Layout, Row, Col, Avatar, Button } from 'antd'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { AppStateType } from '../../redux/redux-store'\r\nimport { logout } from '../../redux/auth-reducer'\r\nimport { UserOutlined } from '@ant-design/icons'\r\n\r\ntype OwnProps = {}\r\n\r\nexport const Header: React.FC<OwnProps> = () => {\r\n  const { Header } = Layout\r\n  const { isAuth, login } = useSelector((state: AppStateType) => state.auth)\r\n  const dispatch = useDispatch()\r\n\r\n  const logoutCallback = () => {\r\n    dispatch(logout())\r\n  }\r\n\r\n  return (\r\n    <Header className=\"header\">\r\n      <Row>\r\n        <Col span={20}>\r\n          <div className=\"logo\" />\r\n          <img\r\n            style={{ width: 80, height: 60 }}\r\n            src=\"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQjPcCvhIcUpVMqNdX31gJU90TGEO2YZBxWPuvuiSMIwJaJ8LyHJqwL7wW32hX_2_H9kCU&usqp=CAU\"\r\n            alt=\"\"\r\n          ></img>\r\n        </Col>\r\n        <Col span={4}>\r\n          <div className={s.loginBlock}>\r\n            {isAuth ? (\r\n              <div>\r\n                <Avatar\r\n                  style={{ backgroundColor: '#87d068' }}\r\n                  icon={<UserOutlined />}\r\n                />\r\n                <span\r\n                  style={{ color: 'white', marginRight: 10, marginLeft: 10 }}\r\n                >\r\n                  {login}\r\n                </span>\r\n                <Button onClick={logoutCallback}>Log out</Button>\r\n              </div>\r\n            ) : (\r\n              <Link to={'/login'}>Login</Link>\r\n            )}\r\n          </div>\r\n        </Col>\r\n      </Row>\r\n    </Header>\r\n  )\r\n}\r\n","import { getAuthUserData } from './auth-reducer'\r\nimport { BaseThunkType, InferActionsTypes } from './redux-store'\r\n\r\nconst initialState = {\r\n  initialized: false\r\n}\r\nexport type initialStateType = typeof initialState\r\ntype ThunkType = BaseThunkType<ActionsTypes>\r\nconst appReducer = (\r\n  state = initialState,\r\n  action: ActionsTypes\r\n): initialStateType => {\r\n  switch (action.type) {\r\n    case 'SN/APP/INITIALIZED_SUCCESS':\r\n      return {\r\n        ...state,\r\n        initialized: true\r\n      }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport const actions = {\r\n  initializedSuccess: () =>\r\n    ({\r\n      type: 'SN/APP/INITIALIZED_SUCCESS'\r\n    } as const)\r\n}\r\n\r\ntype ActionsTypes = InferActionsTypes<typeof actions>\r\n\r\nexport const initializeApp = (): ThunkType => async (dispatch: any) => {\r\n  const promise = await dispatch(getAuthUserData())\r\n\r\n  Promise.all([promise]).then(() => {\r\n    dispatch(actions.initializedSuccess())\r\n  })\r\n}\r\n\r\nexport default appReducer\r\n","export type friendType = {\r\n  id: number\r\n  name: string\r\n}\r\n\r\nconst initialState = {\r\n  friends: [\r\n    { id: 1, name: 'user1' },\r\n    { id: 2, name: 'user2' },\r\n    { id: 3, name: 'user3' }\r\n  ] as Array<friendType>\r\n}\r\n\r\nconst sidebarReducer = (state = initialState): initialStateType => {\r\n  return state\r\n}\r\n\r\nexport default sidebarReducer\r\n\r\nexport type initialStateType = typeof initialState\r\n","import {\r\n  combineReducers,\r\n  createStore,\r\n  compose,\r\n  applyMiddleware,\r\n  Action\r\n} from 'redux'\r\nimport profileReducer from './profile-reducer'\r\nimport dialogsReducer from './dialogs-reducer'\r\nimport navbarReducer from './navbar-reducer'\r\nimport usersReducer from './users-reducer'\r\nimport authReducer from './auth-reducer'\r\nimport appReducer from './app-reducer'\r\nimport chatReducer from './chat-reducer'\r\nimport { reducer as formReducer } from 'redux-form'\r\nimport thunkMiddleware, { ThunkAction } from 'redux-thunk'\r\n\r\nconst rootReducer = combineReducers({\r\n  profilePage: profileReducer,\r\n  dialogsPage: dialogsReducer,\r\n  navbar: navbarReducer,\r\n  usersPage: usersReducer,\r\n  auth: authReducer,\r\n  form: formReducer,\r\n  app: appReducer,\r\n  chat: chatReducer\r\n})\r\n\r\ntype rootReducerType = typeof rootReducer\r\nexport type AppStateType = ReturnType<rootReducerType>\r\n\r\nexport type InferActionsTypes<T> = T extends {\r\n  [keys: string]: (...args: any[]) => infer U\r\n}\r\n  ? U\r\n  : never\r\n\r\nexport type BaseThunkType<\r\n  A extends Action = Action,\r\n  R = Promise<void>\r\n> = ThunkAction<R, AppStateType, unknown, A>\r\n\r\n//@ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\r\nconst store = createStore(\r\n  rootReducer,\r\n  composeEnhancers(applyMiddleware(thunkMiddleware))\r\n)\r\n\r\nexport default store\r\n","import React, { Component, Suspense } from 'react'\r\n\r\nimport './App.css'\r\nimport 'antd/dist/antd.css'\r\nimport News from './components/News/News'\r\nimport Music from './components/Music/Music'\r\nimport { UsersPage } from './components/Users/UsersPage'\r\nimport Settings from './components/Settings/Settings'\r\nimport { LoginPage } from './components/Login/Login'\r\nimport FriendsContainer from './components/Navbar/Friends/FriendsContainer'\r\nimport { Header } from './components/Header/Header'\r\nimport {\r\n  Route,\r\n  withRouter,\r\n  Redirect,\r\n  Switch,\r\n  Link,\r\n  HashRouter\r\n} from 'react-router-dom'\r\nimport { connect, Provider } from 'react-redux'\r\nimport { initializeApp } from './redux/app-reducer'\r\nimport { compose } from 'redux'\r\nimport Preloader from './components/common/Preloader/Preloader'\r\nimport store, { AppStateType } from './redux/redux-store'\r\nimport { Layout, Menu, Breadcrumb, Result, Button } from 'antd'\r\nimport {\r\n  UserOutlined,\r\n  LaptopOutlined,\r\n  SettingOutlined,\r\n  SmileOutlined\r\n} from '@ant-design/icons'\r\n\r\nconst { SubMenu } = Menu\r\nconst { Content, Footer, Sider } = Layout\r\n\r\nconst DialogsContainer = React.lazy(\r\n  () => import('./components/Dialogs/DialogsContainer')\r\n)\r\nconst ProfileContainer = React.lazy(\r\n  () => import('./components/Profile/ProfileContainer')\r\n)\r\n\r\nconst ChatPage = React.lazy(() =>\r\n  import('./pages/Chat/ChatPage').then(module => ({\r\n    default: module.ChatPage\r\n  }))\r\n)\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\ntype DispatchPropsType = {\r\n  initializeApp: () => void\r\n}\r\n\r\nclass App extends Component<MapPropsType & DispatchPropsType> {\r\n  catchAllUnhandledErrors = (e: PromiseRejectionEvent) => {\r\n    alert('Some error occured')\r\n  }\r\n  componentDidMount() {\r\n    this.props.initializeApp()\r\n    window.addEventListener('unhandledrejection', this.catchAllUnhandledErrors)\r\n  }\r\n  componentWillUnmount() {\r\n    window.removeEventListener(\r\n      'unhandledrejection',\r\n      this.catchAllUnhandledErrors\r\n    )\r\n  }\r\n  render() {\r\n    if (!this.props.initialized) {\r\n      return <Preloader />\r\n    }\r\n    return (\r\n      <Layout>\r\n        <Header />\r\n        <Content style={{ padding: '0 50px' }}>\r\n          <Breadcrumb style={{ margin: '16px 0' }}>\r\n            <Breadcrumb.Item>Home</Breadcrumb.Item>\r\n            <Breadcrumb.Item>List</Breadcrumb.Item>\r\n            <Breadcrumb.Item>App</Breadcrumb.Item>\r\n          </Breadcrumb>\r\n          <Layout\r\n            className=\"site-layout-background\"\r\n            style={{ padding: '24px 0' }}\r\n          >\r\n            <Sider className=\"site-layout-background\" width={200}>\r\n              <Menu\r\n                mode=\"inline\"\r\n                // defaultSelectedKeys={['2']}\r\n                // defaultOpenKeys={['sub1']}\r\n                style={{ height: '100%' }}\r\n              >\r\n                <SubMenu key=\"sub1\" icon={<UserOutlined />} title=\"My profile\">\r\n                  <Menu.Item key=\"1\">\r\n                    <Link to=\"/profile\">Profile</Link>\r\n                  </Menu.Item>\r\n                  <Menu.Item key=\"2\">\r\n                    <Link to=\"/dialogs\">Dialogs</Link>\r\n                  </Menu.Item>\r\n                  <Menu.Item key=\"3\">option3</Menu.Item>\r\n                  <Menu.Item key=\"4\">option4</Menu.Item>\r\n                </SubMenu>\r\n                <SubMenu\r\n                  key=\"sub2\"\r\n                  icon={<LaptopOutlined />}\r\n                  title=\"Developers\"\r\n                >\r\n                  <Menu.Item key=\"5\">\r\n                    <Link to=\"/users\">Users</Link>\r\n                  </Menu.Item>\r\n                  <Menu.Item key=\"6\">option6</Menu.Item>\r\n                  <Menu.Item key=\"7\">option7</Menu.Item>\r\n                  <Menu.Item key=\"8\">option8</Menu.Item>\r\n                </SubMenu>\r\n                <SubMenu key=\"sub3\" icon={<SettingOutlined />} title=\"subnav 3\">\r\n                  <Menu.Item key=\"9\">\r\n                    <Link to=\"/music\">Music</Link>\r\n                  </Menu.Item>\r\n                  <Menu.Item key=\"10\">\r\n                    <Link to=\"/news\">News</Link>\r\n                  </Menu.Item>\r\n                  <Menu.Item key=\"11\">\r\n                    <Link to=\"/settings\">Settings</Link>\r\n                  </Menu.Item>\r\n                  <Menu.Item key=\"12\">\r\n                    <Link to=\"/chat\">Chat</Link>\r\n                  </Menu.Item>\r\n                </SubMenu>\r\n\r\n                <SubMenu\r\n                  key=\"sub4\"\r\n                  icon={<SmileOutlined />}\r\n                  title=\"Best Friend\"\r\n                >\r\n                  <FriendsContainer />\r\n                </SubMenu>\r\n              </Menu>\r\n            </Sider>\r\n            <Content style={{ padding: '0 24px', minHeight: 280 }}>\r\n              <Suspense\r\n                fallback={\r\n                  <div>\r\n                    <Preloader />\r\n                    Загружаюсь.......\r\n                  </div>\r\n                }\r\n              >\r\n                <Switch>\r\n                  <Route\r\n                    exact\r\n                    path=\"/\"\r\n                    render={() => <Redirect to={'/profile'} />}\r\n                  />\r\n                  <Route\r\n                    path=\"/profile/:userId?\"\r\n                    render={() => <ProfileContainer />}\r\n                  />\r\n                  <Route path=\"/dialogs\" render={() => <DialogsContainer />} />\r\n                  <Route path=\"/news\" render={() => <News />} />\r\n                  <Route path=\"/music\" render={() => <Music />} />\r\n                  <Route\r\n                    path=\"/users\"\r\n                    render={() => (\r\n                      <UsersPage pageTitle={'Заголовок Страницы'} />\r\n                    )}\r\n                  />\r\n                  <Route path=\"/settings\" render={() => <Settings />} />\r\n                  <Route path=\"/login\" render={() => <LoginPage />} />\r\n                  <Route path=\"/chat\" render={() => <ChatPage />} />\r\n                  <Route\r\n                    path=\"*\"\r\n                    render={() => (\r\n                      <Result\r\n                        status=\"404\"\r\n                        title=\"404\"\r\n                        subTitle=\"Страницы не существует, возможно появится позже\"\r\n                        extra={\r\n                          <Link to=\"/\">\r\n                            <Button type=\"primary\">Back Home</Button>\r\n                          </Link>\r\n                        }\r\n                      />\r\n                    )}\r\n                  />\r\n                </Switch>\r\n              </Suspense>\r\n            </Content>\r\n          </Layout>\r\n        </Content>\r\n        <Footer style={{ textAlign: 'center' }}>See on top</Footer>\r\n      </Layout>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType) => ({\r\n  initialized: state.app.initialized\r\n})\r\n\r\nconst AppContainer = compose<React.ComponentType>(\r\n  withRouter,\r\n  connect(mapStateToProps, { initializeApp })\r\n)(App)\r\n\r\nconst SocialWebApp: React.FC = () => {\r\n  return (\r\n    <HashRouter>\r\n      <Provider store={store}>\r\n        <AppContainer />\r\n      </Provider>\r\n    </HashRouter>\r\n  )\r\n}\r\n\r\nexport default SocialWebApp\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport SocialWebApp from './App'\r\n\r\nReactDOM.render(<SocialWebApp />, document.getElementById('root'))\r\n","import React from 'react'\r\nimport styles from './FormsControls.module.css'\r\nimport { Field, WrappedFieldProps } from 'redux-form'\r\nimport { WrappedFieldMetaProps } from 'redux-form/lib/Field'\r\nimport { fiealValidatorType } from '../../../utils/validators/validators'\r\n\r\ntype FormControlPropsType = {\r\n  meta: WrappedFieldMetaProps\r\n}\r\n\r\nconst FormControl: React.FC<FormControlPropsType> = ({\r\n  meta: { touched, error },\r\n  children\r\n}) => {\r\n  const hasError = touched && error\r\n  return (\r\n    <div className={styles.formControl + ' ' + (hasError ? styles.error : '')}>\r\n      <div>{children}</div>\r\n      {hasError && <span>{error}</span>}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport const Textarea: React.FC<WrappedFieldProps> = props => {\r\n  const { input, meta, ...restProps } = props\r\n  return (\r\n    <FormControl {...props}>\r\n      <textarea {...input} {...restProps} />\r\n    </FormControl>\r\n  )\r\n}\r\n\r\nexport const Input: React.FC<WrappedFieldProps> = props => {\r\n  const { input, meta, ...restProps } = props\r\n  return (\r\n    <FormControl {...props}>\r\n      <input {...input} {...restProps} />\r\n    </FormControl>\r\n  )\r\n}\r\n\r\nexport function createField<FormKeysType extends string>(\r\n  placeholder: string | undefined,\r\n  name: FormKeysType,\r\n  validators: Array<fiealValidatorType>,\r\n  component: React.FC<WrappedFieldProps>,\r\n  props = {},\r\n  text = ''\r\n) {\r\n  return (\r\n    <div>\r\n      <Field\r\n        placeholder={placeholder}\r\n        name={name}\r\n        validate={validators}\r\n        component={component}\r\n        {...props}\r\n      />\r\n      {text}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport type GetStringKeys<T> = Extract<keyof T, string>\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__rQ4kA\",\"error\":\"FormsControls_error__32_90\",\"formSummaryError\":\"FormsControls_formSummaryError__1ug83\"};","export type fiealValidatorType = (value: string) => string | undefined\r\n\r\nexport const required: fiealValidatorType = value => {\r\n  if (value) return undefined\r\n\r\n  return 'Field required'\r\n}\r\n\r\nexport const maxLengthCreator =\r\n  (maxLength: number): fiealValidatorType =>\r\n  value => {\r\n    if (value.length > maxLength) return `Max length is ${maxLength} symbols`\r\n\r\n    return undefined\r\n  }\r\n","export default __webpack_public_path__ + \"static/media/preloader.6fa5554b.svg\";","import React from 'react'\r\nimport preloader from '../../../assets/images/preloader.svg'\r\n\r\nconst Preloader: React.FC = () => {\r\n  return <img src={preloader} alt=\"preloader\"></img>\r\n}\r\n\r\nexport default Preloader\r\n"],"sourceRoot":""}