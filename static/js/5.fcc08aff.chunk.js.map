{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/Dialogs/Message/Message.tsx","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/AddMessageForm/AddMessageForm.tsx","components/Dialogs/Dialogs.tsx","components/hoc/withAuthRedirect.tsx","components/Dialogs/DialogsContainer.tsx"],"names":["module","exports","Message","props","className","s","message","src","alt","DialogItem","path","id","dialog","name","to","activeClassName","active","maxLength30","maxLengthCreator","reduxForm","form","onSubmit","handleSubmit","createField","required","Textarea","Dialogs","dialogsElements","dialogsPage","dialogs","map","d","messegesElements","messages","m","dialogsItems","values","sendMessage","newMessageBody","mapStateToPropsForRedirect","state","isAuth","auth","compose","connect","actions","WrappedComponent","restProps"],"mappings":"uGACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,yBAAyB,WAAa,4BAA4B,iBAAmB,kCAAkC,iBAAmB,oC,mFCkB9UC,EAZsB,SAAAC,GACnC,OACE,qBAAIC,UAAWC,IAAEC,QAAjB,UACE,qBACEC,IAAI,wFACJC,IAAI,KAEN,4BAAIL,EAAMG,c,QCWDG,EAhByB,SAAAN,GACtC,IAAMO,EAAO,YAAcP,EAAMQ,GAEjC,OACE,qBAAIP,UAAWC,IAAEO,OAAjB,UACE,qBACEL,IAAI,wFACJC,IAAKL,EAAMU,OAEb,cAAC,IAAD,CAASC,GAAIJ,EAAMK,gBAAiBV,IAAEW,OAAtC,SACGb,EAAMU,W,yBCVTI,EAAcC,YAAiB,IA0BtBC,cAAoC,CACjDC,KAAM,2BADOD,EAhBX,SAAAhB,GACF,OACE,sBAAMkB,SAAUlB,EAAMmB,aAAtB,SACE,gCACGC,YACC,qBACA,iBACA,CAACC,IAAUP,GACXQ,KAEF,yDCUOC,EAvBsB,SAAAvB,GACnC,IAAMwB,EAAkBxB,EAAMyB,YAAYC,QAAQC,KAAI,SAAAC,GAAC,OACrD,cAAC,EAAD,CAAYlB,KAAMkB,EAAElB,KAAiBF,GAAIoB,EAAEpB,IAAZoB,EAAEpB,OAE7BqB,EAAmB7B,EAAMyB,YAAYK,SAASH,KAAI,SAAAI,GAAC,OACvD,cAAC,EAAD,CAAS5B,QAAS4B,EAAE5B,SAAc4B,EAAEvB,OAOtC,OACE,sBAAKP,UAAWC,IAAEwB,QAAlB,UACE,oBAAIzB,UAAWC,IAAE8B,aAAjB,SAAgCR,IAChC,qBAAIvB,UAAWC,IAAE4B,SAAjB,UACGD,EACD,cAAC,EAAD,CAAgBX,SATA,SAACe,GACrBjC,EAAMkC,YAAYD,EAAOE,0B,+CCpBvBC,EAA6B,SAACC,GAAD,MAChC,CACCC,OAAQD,EAAME,KAAKD,S,YCMRE,sBACbC,aAPsB,SAACJ,GACvB,MAAO,CACLZ,YAAaY,EAAMZ,eAKd,eAAuBiB,ODCzB,SACLC,GAoBA,OAVuCF,YAMrCL,EACA,GAPqCK,EAPrC,SAAAzC,GACE,IAAQsC,EAAyBtC,EAAzBsC,OAAWM,EAAnB,YAAiC5C,EAAjC,GACA,OAAKsC,EAEE,cAACK,EAAD,eAAuBC,IAFV,cAAC,IAAD,CAAUjC,GAAG,gBCRxB6B,CAGbjB","file":"static/js/5.fcc08aff.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__1AGpa\",\"dialogsItems\":\"Dialogs_dialogsItems__n06Ep\",\"dialog\":\"Dialogs_dialog__V9Cw-\",\"active\":\"Dialogs_active__16Diu\",\"messages\":\"Dialogs_messages__EXsar\",\"message\":\"Dialogs_message__3wSeo\",\"buttonBlue\":\"Dialogs_buttonBlue__3arLj\",\"buttonBlueEffect\":\"Dialogs_buttonBlueEffect__3y8X3\",\"buttonBlueRotate\":\"Dialogs_buttonBlueRotate__DayCW\"};","import React from 'react'\r\nimport s from './../Dialogs.module.css'\r\n\r\ntype PropsType = {\r\n  message: string\r\n}\r\n\r\nconst Message: React.FC<PropsType> = props => {\r\n  return (\r\n    <li className={s.message}>\r\n      <img\r\n        src=\"http://www.petplan.com.au/blog/wp-content/uploads/2016/12/pet-insurance-dog-cat-8.jpg\"\r\n        alt=\"\"\r\n      ></img>\r\n      <p>{props.message}</p>\r\n    </li>\r\n  )\r\n}\r\n\r\nexport default Message\r\n","import React from 'react'\r\nimport s from './../Dialogs.module.css'\r\nimport { NavLink } from 'react-router-dom'\r\n\r\ntype PropsType = {\r\n  id: number\r\n  name: string\r\n}\r\n\r\nconst DialogItem: React.FC<PropsType> = props => {\r\n  const path = '/dialogs/' + props.id\r\n\r\n  return (\r\n    <li className={s.dialog}>\r\n      <img\r\n        src=\"http://www.petplan.com.au/blog/wp-content/uploads/2016/12/pet-insurance-dog-cat-8.jpg\"\r\n        alt={props.name}\r\n      ></img>\r\n      <NavLink to={path} activeClassName={s.active}>\r\n        {props.name}\r\n      </NavLink>\r\n    </li>\r\n  )\r\n}\r\n\r\nexport default DialogItem\r\n","import React from 'react'\r\nimport { InjectedFormProps, reduxForm } from 'redux-form'\r\nimport { createField, Textarea } from '../../common/FormsControls/FormsControls'\r\nimport {\r\n  maxLengthCreator,\r\n  required\r\n} from '../../../utils/validators/validators'\r\nimport { NewMessageFormValuesType } from '../Dialogs'\r\n\r\nconst maxLength30 = maxLengthCreator(30)\r\n\r\ntype NewMessageFormValuesKeysType = Extract<\r\n  keyof NewMessageFormValuesType,\r\n  string\r\n>\r\n\r\ntype PropsType = {}\r\nconst AddMessageForm: React.FC<\r\n  InjectedFormProps<NewMessageFormValuesType, PropsType> & PropsType\r\n> = props => {\r\n  return (\r\n    <form onSubmit={props.handleSubmit}>\r\n      <div>\r\n        {createField<NewMessageFormValuesKeysType>(\r\n          'Enter your message',\r\n          'newMessageBody',\r\n          [required, maxLength30],\r\n          Textarea\r\n        )}\r\n        <button>add message</button>\r\n      </div>\r\n    </form>\r\n  )\r\n}\r\n\r\nexport default reduxForm<NewMessageFormValuesType>({\r\n  form: 'dialog-add-message-form'\r\n})(AddMessageForm)\r\n","import React from 'react'\r\nimport s from './Dialogs.module.css'\r\nimport Message from './Message/Message'\r\nimport DialogItem from './DialogItem/DialogItem'\r\nimport AddMessageForm from './AddMessageForm/AddMessageForm'\r\nimport { initialStateType } from '../../redux/dialogs-reducer'\r\n\r\ntype PropsType = {\r\n  dialogsPage: initialStateType\r\n  sendMessage: (messageText: string) => void\r\n}\r\n\r\nexport type NewMessageFormValuesType = {\r\n  newMessageBody: string\r\n}\r\n\r\nconst Dialogs: React.FC<PropsType> = props => {\r\n  const dialogsElements = props.dialogsPage.dialogs.map(d => (\r\n    <DialogItem name={d.name} key={d.id} id={d.id} />\r\n  ))\r\n  const messegesElements = props.dialogsPage.messages.map(m => (\r\n    <Message message={m.message} key={m.id} />\r\n  ))\r\n\r\n  const addNewMessage = (values: NewMessageFormValuesType) => {\r\n    props.sendMessage(values.newMessageBody)\r\n  }\r\n\r\n  return (\r\n    <div className={s.dialogs}>\r\n      <ul className={s.dialogsItems}>{dialogsElements}</ul>\r\n      <ul className={s.messages}>\r\n        {messegesElements}\r\n        <AddMessageForm onSubmit={addNewMessage} />\r\n      </ul>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Dialogs\r\n","import React from 'react'\r\nimport { Redirect } from 'react-router-dom'\r\nimport { connect } from 'react-redux'\r\nimport { AppStateType } from '../../redux/redux-store'\r\n\r\nconst mapStateToPropsForRedirect = (state: AppStateType) =>\r\n  ({\r\n    isAuth: state.auth.isAuth\r\n  } as MapPropsType)\r\n\r\ntype MapPropsType = {\r\n  isAuth: boolean\r\n}\r\ntype DispatchPropsType = {}\r\n\r\nexport function withAuthRedirect<WCP>(\r\n  WrappedComponent: React.ComponentType<WCP>\r\n) {\r\n  const RedirectComponent: React.FC<MapPropsType & DispatchPropsType> =\r\n    props => {\r\n      const { isAuth, ...restProps } = props\r\n      if (!isAuth) return <Redirect to=\"/login\" />\r\n\r\n      return <WrappedComponent {...(restProps as WCP)} />\r\n    }\r\n\r\n  const ConnectedAuthRedirectComponent = connect<\r\n    MapPropsType,\r\n    DispatchPropsType,\r\n    WCP,\r\n    AppStateType\r\n  >(\r\n    mapStateToPropsForRedirect,\r\n    {}\r\n  )(RedirectComponent)\r\n\r\n  return ConnectedAuthRedirectComponent\r\n}\r\n","import Dialogs from './Dialogs'\r\nimport { actions } from '../../redux/dialogs-reducer'\r\nimport { connect } from 'react-redux'\r\nimport { withAuthRedirect } from '../hoc/withAuthRedirect'\r\nimport { compose } from 'redux'\r\nimport { AppStateType } from '../../redux/redux-store'\r\n\r\nconst mapStateToProps = (state: AppStateType) => {\r\n  return {\r\n    dialogsPage: state.dialogsPage\r\n  }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n  connect(mapStateToProps, { ...actions }),\r\n  withAuthRedirect\r\n)(Dialogs)\r\n"],"sourceRoot":""}