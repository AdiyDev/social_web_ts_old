{"version":3,"sources":["components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/Profile.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","assets/images/userPhotoEmpty.jpg","components/Profile/ProfileInfo/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/AddPostForm/AddPostForm.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"names":["module","exports","ProfileStatusWithHooks","props","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","autoFocus","onBlur","onChange","e","currentTarget","value","updateStatus","onFocus","target","select","ProfileDataFormReduxForm","reduxForm","form","handleSubmit","profile","error","onSubmit","className","style","formSummaryError","createField","Input","type","Textarea","Object","keys","contacts","map","key","s","contact","ProfileData","isOwner","goToEditMode","onClick","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","contactTitle","contactValue","Contact","ProfileInfo","savePhoto","saveProfile","Preloader","profileInfoWrapper","imageBlock","src","alt","descriptionBlock","photos","large","userPhotoEmpty","width","height","files","length","initialValues","formData","then","Post","item","message","likesCount","maxLength30","maxLengthCreator","required","MyPosts","postsElements","posts","reverse","p","id","postsBlock","values","addPost","newPostText","MyPostsMemorized","React","memo","MyPostsContainer","connect","state","profilePage","actions","addPostActionCreator","Profile","profileWrapper","ProfileContainer","userId","this","match","params","authorizedUserId","history","push","getUserProfile","getStatus","console","refreshProfile","prevProps","prevState","Component","compose","auth","isAuth","withRouter"],"mappings":"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","file":"static/js/3.11352e13.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"profileInfoWrapper\":\"ProfileInfo_profileInfoWrapper__2LokH\",\"imageBlock\":\"ProfileInfo_imageBlock__3T3LG\",\"descriptionBlock\":\"ProfileInfo_descriptionBlock__35ic4\",\"mainPhoto\":\"ProfileInfo_mainPhoto__1fXQo\",\"contact\":\"ProfileInfo_contact__ucwRs\",\"minPhoto\":\"ProfileInfo_minPhoto__2oANI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profileWrapper\":\"Profile_profileWrapper__1N6LV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"posts\":\"MyPosts_posts__g3CcB\",\"postsBlock\":\"MyPosts_postsBlock__36tsT\",\"myPostsBlock\":\"MyPosts_myPostsBlock__38VSX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__3KeXi\"};","import React, { useState, useEffect, ChangeEvent } from 'react'\r\n\r\ntype PropsType = {\r\n  status: string\r\n  updateStatus: (status: string) => void\r\n}\r\n\r\nconst ProfileStatusWithHooks: React.FC<PropsType> = props => {\r\n  const [editMode, setEditMode] = useState(false)\r\n  const [status, setStatus] = useState(props.status)\r\n\r\n  useEffect(() => {\r\n    setStatus(props.status)\r\n  }, [props.status])\r\n\r\n  const activeteEditMode = () => {\r\n    setEditMode(true)\r\n  }\r\n\r\n  const deactiveteEditMode = () => {\r\n    setEditMode(false)\r\n  }\r\n\r\n  const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n    setStatus(e.currentTarget.value)\r\n    props.updateStatus(status)\r\n  }\r\n\r\n  const handleFocus = (e: ChangeEvent<HTMLInputElement>) => {\r\n    e.target.select()\r\n  }\r\n\r\n  return (\r\n    <ul>\r\n      {!editMode && (\r\n        <li>\r\n          <span onDoubleClick={activeteEditMode}>{status || '------'}</span>\r\n        </li>\r\n      )}\r\n      {editMode && (\r\n        <li>\r\n          <input\r\n            autoFocus={true}\r\n            onBlur={deactiveteEditMode}\r\n            onChange={onStatusChange}\r\n            onFocus={handleFocus}\r\n            value={status}\r\n          />\r\n        </li>\r\n      )}\r\n    </ul>\r\n  )\r\n}\r\n\r\nexport default ProfileStatusWithHooks\r\n","export default __webpack_public_path__ + \"static/media/userPhotoEmpty.b6e40cdf.jpg\";","import React from 'react'\r\nimport s from './ProfileInfo.module.css'\r\nimport {\r\n  createField,\r\n  GetStringKeys,\r\n  Input,\r\n  Textarea\r\n} from '../../common/FormsControls/FormsControls'\r\nimport { InjectedFormProps, reduxForm } from 'redux-form'\r\nimport style from '../../common/FormsControls/FormsControls.module.css'\r\nimport { ProfileType } from '../../../types/types'\r\n\r\ntype PropsType = {\r\n  profile: ProfileType\r\n}\r\ntype ProfileTypeKeys = GetStringKeys<ProfileType>\r\n\r\nconst ProfileDataForm: React.FC<\r\n  InjectedFormProps<ProfileType, PropsType> & PropsType\r\n> = ({ handleSubmit, profile, error }) => {\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <div>\r\n        <button>save</button>\r\n      </div>\r\n      {error && <div className={style.formSummaryError}>{error}</div>}\r\n      <div>\r\n        <b>Full name</b>:{' '}\r\n        {createField<ProfileTypeKeys>('Full name', 'fullName', [], Input)}\r\n      </div>\r\n      <div>\r\n        <b>Looking for a job</b>:{' '}\r\n        {createField<ProfileTypeKeys>('', 'lookingForAJob', [], Input, {\r\n          type: 'checkbox'\r\n        })}\r\n      </div>\r\n\r\n      <div>\r\n        <b>My professional skills</b>:\r\n        {createField<ProfileTypeKeys>(\r\n          'My professional skills',\r\n          'lookingForAJobDescription',\r\n          [],\r\n          Textarea\r\n        )}\r\n      </div>\r\n\r\n      <div>\r\n        <b>About me</b>:{createField('About me', 'aboutMe', [], Textarea)}\r\n      </div>\r\n      <div>\r\n        <b>Contacts</b>:{' '}\r\n        {Object.keys(profile.contacts).map(key => {\r\n          return (\r\n            <div key={key} className={s.contact}>\r\n              <b>\r\n                {key}: {createField(key, 'contacts.' + key, [], Input)}\r\n              </b>\r\n            </div>\r\n          )\r\n        })}\r\n      </div>\r\n    </form>\r\n  )\r\n}\r\n\r\nconst ProfileDataFormReduxForm = reduxForm<ProfileType, PropsType>({\r\n  form: 'edit-profile'\r\n})(ProfileDataForm)\r\n\r\nexport default ProfileDataFormReduxForm\r\n","import React, { useState, ChangeEvent } from 'react'\r\nimport s from './ProfileInfo.module.css'\r\nimport Preloader from '../../common/Preloader/Preloader'\r\nimport ProfileStatusWithHooks from './ProfileStatusWithHooks'\r\nimport userPhotoEmpty from '../../../assets/images/userPhotoEmpty.jpg'\r\nimport ProfileDataForm from './ProfileDataForm'\r\nimport { ContactsType, ProfileType } from '../../../types/types'\r\nimport { Image } from 'antd'\r\n\r\ntype PropsType = {\r\n  profile: ProfileType | null\r\n  status: string\r\n  updateStatus: (status: string) => void\r\n  isOwner: boolean\r\n  savePhoto: (file: File) => void\r\n  saveProfile: (profile: ProfileType) => Promise<any>\r\n}\r\n\r\nconst ProfileInfo: React.FC<PropsType> = ({\r\n  profile,\r\n  status,\r\n  updateStatus,\r\n  isOwner,\r\n  savePhoto,\r\n  saveProfile\r\n}) => {\r\n  const [editMode, setEditMode] = useState(false)\r\n\r\n  if (!profile) {\r\n    return <Preloader />\r\n  }\r\n\r\n  const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n    if (e.target.files?.length) {\r\n      savePhoto(e.target.files[0])\r\n    }\r\n  }\r\n\r\n  const onSubmit = (formData: ProfileType) => {\r\n    saveProfile(formData).then(() => {\r\n      setEditMode(false)\r\n    })\r\n  }\r\n\r\n  return (\r\n    <ul className={s.profileInfoWrapper}>\r\n      <li className={s.imageBlock}>\r\n        <img\r\n          src=\"https://helpx.adobe.com/content/dam/help/en/photoshop/using/convert-color-image-black-white/jcr_content/main-pars/before_and_after/image-before/Landscape-Color.jpg\"\r\n          alt=\"Шапка профиля\"\r\n        ></img>\r\n      </li>\r\n      <li className={s.descriptionBlock}>\r\n        <Image\r\n          src={profile.photos.large || userPhotoEmpty}\r\n          style={{ width: '300px', height: '300px' }}\r\n          alt=\"\"\r\n        />\r\n        {isOwner && <input type={'file'} onChange={onMainPhotoSelected} />}\r\n\r\n        {editMode ? (\r\n          <ProfileDataForm\r\n            initialValues={profile}\r\n            profile={profile}\r\n            onSubmit={onSubmit}\r\n          />\r\n        ) : (\r\n          <ProfileData\r\n            goToEditMode={() => {\r\n              setEditMode(true)\r\n            }}\r\n            profile={profile}\r\n            isOwner={isOwner}\r\n          />\r\n        )}\r\n\r\n        <ProfileStatusWithHooks status={status} updateStatus={updateStatus} />\r\n      </li>\r\n    </ul>\r\n  )\r\n}\r\n\r\ntype ProfileDataPropsType = {\r\n  profile: ProfileType\r\n  isOwner: boolean\r\n  goToEditMode: () => void\r\n}\r\n\r\nconst ProfileData: React.FC<ProfileDataPropsType> = ({\r\n  profile,\r\n  isOwner,\r\n  goToEditMode\r\n}) => {\r\n  return (\r\n    <div>\r\n      {isOwner && (\r\n        <div>\r\n          <button onClick={goToEditMode}>edit</button>\r\n        </div>\r\n      )}\r\n      <div>\r\n        <b>Full name</b>: {profile.fullName}\r\n      </div>\r\n      <div>\r\n        <b>Looking for a job</b>: {profile.lookingForAJob ? 'yes' : 'no'}\r\n      </div>\r\n      {profile.lookingForAJob && (\r\n        <div>\r\n          <b>My professional skills</b>: {profile.lookingForAJobDescription}\r\n        </div>\r\n      )}\r\n\r\n      <div>\r\n        <b>About me</b>: {profile.aboutMe}\r\n      </div>\r\n      <div>\r\n        <b>My professional skills</b>: {profile.lookingForAJobDescription}\r\n      </div>\r\n      <div>\r\n        <b>Contacts</b>:\r\n        {Object.keys(profile.contacts).map(key => {\r\n          return (\r\n            <Contact\r\n              key={key}\r\n              contactTitle={key}\r\n              contactValue={profile.contacts[key as keyof ContactsType]}\r\n            />\r\n          )\r\n        })}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\ntype ContactsPropsType = {\r\n  contactTitle: string\r\n  contactValue: string\r\n}\r\nconst Contact: React.FC<ContactsPropsType> = ({\r\n  contactTitle,\r\n  contactValue\r\n}) => {\r\n  return (\r\n    <div className={s.contact}>\r\n      <b>{contactTitle}</b>: {contactValue}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ProfileInfo\r\n","import React from 'react'\r\nimport s from './Post.module.css'\r\n\r\ntype PropsType = {\r\n  message: string\r\n  likesCount: number\r\n}\r\n\r\nconst Post: React.FC<PropsType> = props => {\r\n  return (\r\n    <li className={s.item}>\r\n      <img\r\n        src=\"http://www.petplan.com.au/blog/wp-content/uploads/2016/12/pet-insurance-dog-cat-8.jpg\"\r\n        alt=\"\"\r\n      ></img>\r\n      {props.message}\r\n      <span>like </span>\r\n      {props.likesCount}\r\n    </li>\r\n  )\r\n}\r\n\r\nexport default Post\r\n","import React from 'react'\r\nimport { InjectedFormProps, reduxForm } from 'redux-form'\r\nimport {\r\n  createField,\r\n  GetStringKeys,\r\n  Input\r\n} from '../../../common/FormsControls/FormsControls'\r\nimport {\r\n  maxLengthCreator,\r\n  required\r\n} from '../../../../utils/validators/validators'\r\n\r\ntype PropsType = {}\r\nexport type AddPostFormValuesType = {\r\n  newPostText: string\r\n}\r\ntype AddPostFormValuesTypeKeys = GetStringKeys<AddPostFormValuesType>\r\n\r\nconst maxLength30 = maxLengthCreator(30)\r\n\r\nconst AddPostForm: React.FC<\r\n  InjectedFormProps<AddPostFormValuesType, PropsType> & PropsType\r\n> = props => {\r\n  return (\r\n    <form onSubmit={props.handleSubmit}>\r\n      <div>\r\n        {createField<AddPostFormValuesTypeKeys>(\r\n          'Your post',\r\n          'newPostText',\r\n          [required, maxLength30],\r\n          Input\r\n        )}\r\n      </div>\r\n      <div>\r\n        <button>Add post</button>\r\n      </div>\r\n    </form>\r\n  )\r\n}\r\n\r\nexport default reduxForm<AddPostFormValuesType, PropsType>({\r\n  form: 'profile-add-post'\r\n})(AddPostForm)\r\n","import React from 'react'\r\nimport s from './MyPosts.module.css'\r\nimport Post from './Post/Post'\r\nimport AddPostForm, { AddPostFormValuesType } from './AddPostForm/AddPostForm'\r\nimport { PostType } from '../../../types/types'\r\n\r\nexport type MapPropsType = {\r\n  posts: Array<PostType>\r\n}\r\nexport type DispatchPropsType = {\r\n  addPost: (newPostText: string) => void\r\n}\r\n\r\nconst MyPosts: React.FC<MapPropsType & DispatchPropsType> = props => {\r\n  const postsElements = [...props.posts]\r\n    .reverse()\r\n    .map(p => <Post key={p.id} message={p.message} likesCount={p.likesCount} />)\r\n\r\n  const onAddPost = (values: AddPostFormValuesType) => {\r\n    props.addPost(values.newPostText)\r\n  }\r\n\r\n  return (\r\n    <div className={s.postsBlock}>\r\n      <h3>My posts</h3>\r\n      <AddPostForm onSubmit={onAddPost} />\r\n      <div className={s.posts}>{postsElements}</div>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst MyPostsMemorized = React.memo(MyPosts)\r\n\r\nexport default MyPostsMemorized\r\n","import MyPosts, { DispatchPropsType, MapPropsType } from './MyPosts'\r\nimport { connect } from 'react-redux'\r\nimport { actions } from '../../../redux/profile-reducer'\r\nimport { AppStateType } from '../../../redux/redux-store'\r\n\r\nconst mapStateToProps = (state: AppStateType) => {\r\n  return {\r\n    posts: state.profilePage.posts\r\n  }\r\n}\r\n\r\nconst MyPostsContainer = connect<\r\n  MapPropsType,\r\n  DispatchPropsType,\r\n  {},\r\n  AppStateType\r\n>(mapStateToProps, {\r\n  addPost: actions.addPostActionCreator\r\n})(MyPosts)\r\n\r\nexport default MyPostsContainer\r\n","import React from 'react'\r\nimport s from './Profile.module.css'\r\nimport ProfileInfo from './ProfileInfo/ProfileInfo'\r\nimport MyPostsContainer from './MyPosts/MyPostsContainer'\r\nimport { ProfileType } from '../../types/types'\r\n\r\ntype PropsType = {\r\n  profile: ProfileType | null\r\n  status: string\r\n  updateStatus: (status: string) => void\r\n  isOwner: boolean\r\n  savePhoto: (file: File) => void\r\n  saveProfile: (profile: ProfileType) => Promise<any>\r\n}\r\n\r\nconst Profile: React.FC<PropsType> = props => {\r\n  return (\r\n    <div className={s.profileWrapper}>\r\n      <ProfileInfo\r\n        isOwner={props.isOwner}\r\n        profile={props.profile}\r\n        status={props.status}\r\n        updateStatus={props.updateStatus}\r\n        saveProfile={props.saveProfile}\r\n        savePhoto={props.savePhoto}\r\n      />\r\n      <MyPostsContainer />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Profile\r\n","import React from 'react'\r\nimport Profile from './Profile'\r\nimport { connect } from 'react-redux'\r\nimport {\r\n  getUserProfile,\r\n  getStatus,\r\n  updateStatus,\r\n  savePhoto,\r\n  saveProfile\r\n} from '../../redux/profile-reducer'\r\nimport { withRouter, RouteComponentProps } from 'react-router-dom'\r\nimport { compose } from 'redux'\r\nimport { AppStateType } from '../../redux/redux-store'\r\nimport { ProfileType } from '../../types/types'\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\ntype DispatchPropsType = {\r\n  getUserProfile: (userId: number) => void\r\n  getStatus: (userId: number) => void\r\n  updateStatus: (status: string) => void\r\n  savePhoto: (file: File) => void\r\n  saveProfile: (profile: ProfileType) => Promise<any>\r\n}\r\n\r\ntype PathParamsType = {\r\n  userId: string\r\n}\r\n\r\ntype PropsType = MapPropsType &\r\n  DispatchPropsType &\r\n  RouteComponentProps<PathParamsType>\r\n\r\nclass ProfileContainer extends React.Component<PropsType> {\r\n  refreshProfile() {\r\n    let userId: number | null = +this.props.match.params.userId\r\n    if (!userId) {\r\n      userId = this.props.authorizedUserId\r\n      if (!userId) {\r\n        this.props.history.push('/login')\r\n      }\r\n    }\r\n\r\n    if (!userId) {\r\n      console.error(\r\n        \"ID should exists in URI params or in state ('authorizedUserId')\"\r\n      )\r\n    } else {\r\n      this.props.getUserProfile(userId)\r\n      this.props.getStatus(userId)\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.refreshProfile()\r\n  }\r\n\r\n  componentDidUpdate(prevProps: PropsType, prevState: PropsType) {\r\n    if (this.props.match.params.userId !== prevProps.match.params.userId) {\r\n      this.refreshProfile()\r\n    }\r\n  }\r\n  render() {\r\n    return (\r\n      <Profile\r\n        {...this.props}\r\n        isOwner={!this.props.match.params.userId}\r\n        profile={this.props.profile}\r\n        status={this.props.status}\r\n        updateStatus={this.props.updateStatus}\r\n        savePhoto={this.props.savePhoto}\r\n      />\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType) => ({\r\n  profile: state.profilePage.profile,\r\n  status: state.profilePage.status,\r\n  authorizedUserId: state.auth.userId,\r\n  isAuth: state.auth.isAuth\r\n})\r\n\r\nexport default compose<React.ComponentType>(\r\n  connect(mapStateToProps, {\r\n    getUserProfile,\r\n    getStatus,\r\n    updateStatus,\r\n    savePhoto,\r\n    saveProfile\r\n  }),\r\n  withRouter\r\n)(ProfileContainer)\r\n"],"sourceRoot":""}